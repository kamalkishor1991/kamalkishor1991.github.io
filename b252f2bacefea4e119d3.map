{"version":3,"sources":["/home/kamal/Projects/react/croma/components/AddPalette.js","/home/kamal/Projects/react/croma/libs/ColorPicker.js","/home/kamal/Projects/react/croma/constants/Colors.js","/home/kamal/Projects/react/croma/components/ColorDetails.js","/home/kamal/Projects/react/croma/screens/ColorDetailScreen.js","/home/kamal/Projects/react/croma/components/CromaColorPicker.js","/home/kamal/Projects/react/croma/components/Card.js","/home/kamal/Projects/react/croma/components/MultiColorView.js","/home/kamal/Projects/react/croma/components/PalettePreviewCard.js","/home/kamal/Projects/react/croma/screens/PalettesScreen.js","/home/kamal/Projects/react/croma/screens/AddPaletteScreen.js","/home/kamal/Projects/react/croma/libs/Storage.js","/home/kamal/Projects/react/croma/components/SavePalette.js","/home/kamal/Projects/react/croma/components/SingleColorView.js","/home/kamal/Projects/react/croma/screens/ColorListScreen.js","/home/kamal/Projects/react/croma/components/SingleColorCard.js","/home/kamal/Projects/react/croma/screens/PaletteScreen.js","/home/kamal/Projects/react/croma/components/PaletteList.js","/home/kamal/Projects/react/croma/components/PaletteCard.js","/home/kamal/Projects/react/croma/screens/HomeScreen.js","/home/kamal/Projects/react/croma/navigation/MainTabNavigator.js","/home/kamal/Projects/react/croma/screens/ColorPickerScreen.js","/home/kamal/Projects/react/croma/screens/SavePaletteScreen.js","/home/kamal/Projects/react/croma/navigation/AppNavigator.web.js","/home/kamal/Projects/react/croma/App.js","/home/kamal/Projects/react/croma/web-build/register-service-worker.js","/home/kamal/Projects/react/croma/assets/images/robot-dev.png","/home/kamal/Projects/react/croma/assets/images/robot-prod.png","/home/kamal/Projects/react/croma/assets/fonts/SpaceMono-Regular.ttf","/home/kamal/Projects/react/croma/components/CromaButton.js"],"names":["AddPalette","props","getPermissionAsync","a","async","Constants","platform","ios","Permissions","status","alert","_pickImage","ImagePicker","mediaTypes","All","quality","base64","undefined","result","Jimp","read","Buffer","uri","state","loading","this","onPress","setState","then","image","err","navigation","navigate","colors","ColorPicker","getProminentColors","style","styles","buttonPro","Alert","React","Component","StyleSheet","create","backgroundColor","console","log","resize","AUTO","data","_prepareDataForKmeans","time","Date","now","ans","kmeans","initialization","maxIterations","JSON","stringify","centroids","sort","c1","c2","size","kmeansColors","map","centroid","Color","_labToHex","_getFinalColors","c","color","tohex","_toArray","tohsv","filteredColors","i","length","colorList","j","push","finalColors","lab","bitmap","width","height","intColor","getPixelColor","hex","_toHexColor","xyz","tolab","substr","split","v","parseFloat","rgba","intToRGBA","r","g","b","index","indexOf","ColorDetail","alignSelf","info","flexDirection","justifyContent","padding","colorNameText","fontSize","fontWeight","items","key","value","torgb","tohsl","tohwb","tocmyk","luminance","toFixed","darkness","View","flex","item","TouchableOpacity","Clipboard","setString","Text","icon","faCopy","ColorDetailScreen","getParam","ScrollView","container","navigationOptions","title","paddingLeft","paddingRight","CromaColorPicker","onColorChange","fromHsv","Card","inner","Animated","children","Colors","marginVertical","elevation","marginTop","marginBottom","MultiColorView","palette","alignItems","PalettePreviewCard","bottom","label","name","marginHorizontal","PalettesScreen","test","text","forEach","toString","replace","str","toUpperCase","AddPaletteScreen","contentContainerStyle","marginLeft","marginRight","Storage","save","colorPalette","AsyncStorage","getItem","palettes","parse","setItem","getAllPalettes","SavePalette","paletteName","card","TextInput","input","placeholder","onChangeText","CromaButton","shadowColor","shadowOffset","shadowOpacity","shadowRadius","margin","borderBottomColor","borderBottomWidth","SingleColorView","colorText","ColorListScreen","listview","SingleColorCard","actionButtonsView","actionButton","faTrashAlt","paddingTop","PaletteScreen","colorObj","PaletteList","inputsContainer","PaletteCard","faEdit","faShareSquare","HomeScreen","isLoading","allPalettes","ActivityIndicator","Object","keys","RootStack","Platform","select","web","headerMode","default","createStackNavigator","ColorDetails","ColorDetailsScreen","Palettes","ColorList","Palette","Home","initialRouteName","defaultNavigationOptions","headerStyle","headerTintColor","createAppContainer","switchNavigator","createSwitchNavigator","Main","MainTabNavigator","path","createBrowserApp","history","App","useState","isLoadingComplete","setLoadingComplete","Dimensions","get","skipLoadingScreen","OS","Math","min","StatusBar","barStyle","AppLoading","startAsync","loadResourcesAsync","onError","handleLoadingError","onFinish","handleFinishLoading","Promise","all","Asset","loadAsync","require","Font","Ionicons","font","error","warn","navigator","window","addEventListener","serviceWorker","register","scope","catch","module","exports","button","textTransform"],"mappings":"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","file":"static/js/app.8b507d94.chunk.js","sourcesContent":["import React from \"react\";\nimport CromaButton from './CromaButton';\nimport * as ImagePicker from 'expo-image-picker';\nimport Constants from 'expo-constants';\nimport * as Permissions from 'expo-permissions';\nimport ColorPicker from '../libs/ColorPicker'\nimport Jimp from 'jimp';\nimport {\n  View,\n  Alert,\n  StyleSheet,\n  ActivityIndicator,\n} from \"react-native\";\n\nexport class AddPalette extends React.Component {\n\n  constructor(props) {\n    super(props);\n    this.state = {loading: false};\n  }\n  \n  render() {\n    return (\n      <View>\n        {this.state.loading ? <ActivityIndicator></ActivityIndicator> : <View></View>}\n        <CromaButton\n          onPress={() => {\n            this.setState({loading: true});\n            this._pickImage().then((image, err) => {\n              // TODO: handle err\n              this.setState({loading: false});\n              this.props.navigation.navigate(\"ColorList\", {colors: ColorPicker.getProminentColors(image)}); \n            });\n          }}\n        >\n           GET PALETTE FROM IMAGE\n        </CromaButton>\n        <CromaButton\n          onPress={() => this.props.navigation.navigate(\"ColorPicker\")}\n        >\n           GET PALETTE FROM COLOR\n        </CromaButton>\n        <CromaButton\n          onPress={() => this.props.navigation.navigate(\"AddPaletteManually\")}\n        >\n           ADD COLORS MANUALLY\n        </CromaButton>\n\n        <CromaButton\n          style={styles.buttonPro}\n          onPress={() => Alert.alert(\"UNLOCK PRO\")}\n        >\n           UNLOCK PRO\n        </CromaButton>\n      </View>\n    );\n  }\n\n  componentDidMount() {\n    this.getPermissionAsync();\n  }\n\n  getPermissionAsync = async () => {\n    if (Constants.platform.ios) {\n      const { status } = await Permissions.askAsync(Permissions.CAMERA_ROLL);\n      if (status !== 'granted') {\n        alert('Sorry, we need camera roll permissions to make this work!');\n      }\n    }\n  }\n\n  _pickImage = async () => {\n    let result = await ImagePicker.launchImageLibraryAsync({\n      mediaTypes: ImagePicker.MediaTypeOptions.All,\n      quality: 1, \n      base64: true,\n    });\n      // console.log(\"Result: \" + JSON.stringify(result));\n    if (result.base64 !== undefined) {\n      return await Jimp.read(new Buffer(result.base64, \"base64\"));\n    } else {\n      return await Jimp.read(result.uri);   \n    }\n  };\n}\n\nconst styles = StyleSheet.create({\n  buttonPro: {\n    backgroundColor: \"#f1544d\",\n  }\n});\n","import kmeans from 'ml-kmeans';\nimport Jimp from 'jimp';\nimport Color from 'pigment/full';\nexport default class ColorPicker {\n  static getProminentColors(image) {\n    console.log(\"image: \" + image);\n    /*\n    Jimp.RESIZE_NEAREST_NEIGHBOR;\n    Jimp.RESIZE_BILINEAR;\n    Jimp.RESIZE_BICUBIC;\n    Jimp.RESIZE_HERMITE;\n    Jimp.RESIZE_BEZIER;\n    These does not work with first params.\n    */\n    image.resize(Jimp.AUTO, 100);\n    let data = ColorPicker._prepareDataForKmeans(image);\n    let time = Date.now()\n    let ans = kmeans(data, 24, { initialization: 'random', maxIterations: 20 });\n    console.log(JSON.stringify(ans) + \",\" + (Date.now() - time) + \" ms\");\n    ans.centroids = ans.centroids.sort((c1, c2) => c2.size - c1.size);\n    console.log(ans.centroids);\n    let kmeansColors  = ans.centroids.map(centroid => {return new Color(this._labToHex(centroid.centroid))});\n    return this._getFinalColors(kmeansColors).map(c => {return {color: c.tohex()}});\n  }\n  // original implementation in java: https://github.com/kamalkishor1991/croma/blob/master/src/main/java/org/numixproject/colorextractor/image/KMeansColorPicker.java\n  static _getFinalColors(kmeansColors) {\n    console.log(\"----------------------\", kmeansColors);\n    kmeansColors.sort((c1, c2) => this._toArray(c1.tohsv())[0] < this._toArray(c2.tohsv())[0]);\n    let filteredColors = [];\n    for (let i = 0;i < kmeansColors.length; i += 4) {\n      let colorList = [];\n      for (let j = 0; j < 4; j++) {\n        colorList.push(kmeansColors[i + j]);\n      }\n      colorList.sort((c1, c2) => this._toArray(c1.tohsv())[1] < this._toArray(c2.tohsv())[1]);\n      filteredColors.push(colorList[colorList.length - 1]);\n      filteredColors.push(colorList[colorList.length - 2]);\n    }\n    console.log(\"filtered colors:\" + filteredColors);\n    let finalColors = [];\n    for (let i = 0;i < filteredColors.length; i += 2) {\n      if (this._toArray(filteredColors[i].tohsv())[2] > this._toArray(filteredColors[i + 1].tohsv())[2]) {\n        finalColors.push(filteredColors[i]);\n      } else {\n        finalColors.push(filteredColors[i + 1]);\n      }\n    }\n    return finalColors;\n  }\n\n  static _labToHex(lab) {\n    let color = new Color(\"lab(\" + lab[0] + \", \" + lab[1] + \", \" + lab[2] +  \")\");\n    return color.tohex();\n  }\n\n  static _prepareDataForKmeans(image) {\n    let data = [];\n    \n    console.log(\"image============\", image.bitmap.width, image.bitmap.height);\n    for (let i = 0; i < image.bitmap.width; i++) {\n      for (let j = 0; j < image.bitmap.height; j++) {\n        let intColor = image.getPixelColor(i, j);\n        let hex = this._toHexColor(intColor);\n        console.log(\"hex:\", hex);\n        let color = new Color(hex);\n        let xyz = color.tolab();\n        // format: \"xyz(19.78527130484015, 8.600439447528947, 95.19796416837329)\" to double array of xyz\n        xyz = xyz.substr(4, xyz.length - 5).split(\", \").map(v => parseFloat(v))\n        data.push(xyz);\n      } \n    }\n    \n    return data;\n  }\n\n  static _toHexColor(intColor) {\n    let rgba = Jimp.intToRGBA(intColor); // TODO: Need to optimize this once everything else starts working.\n    let color = new Color(\"rgb(\" + rgba.r + \", \" + rgba.g + \", \" + rgba.b + \")\");\n    return color.tohex();\n  }\n\n  static _toArray(color) {\n    let index = color.indexOf(\"(\");\n    color = color.substr(index + 1, color.length - index);\n    return color.split(\", \").map(c => parseFloat(c));\n  }\n}","const tintColor = '#2f95dc';\n\nexport default {\n  tintColor,\n  tabIconDefault: '#ccc',\n  tabIconSelected: tintColor,\n  tabBar: '#fefefe',\n  errorBackground: 'red',\n  errorText: '#fff',\n  warningBackground: '#EAEB5E',\n  warningText: '#666804',\n  noticeBackground: tintColor,\n  noticeText: '#fff',\n  primary: '#f1544d',\n  primaryDark: '#c94740',\n  text: '#fff',\n  accent: '#f0d04c',\n  grey: '#888',\n  darkGrey: '#333',\n  lightGrey: '#eee',\n  white: '#fff',\n  black: '#000',\n  fadedBlack: 'rgba(0, 0, 0, .5)',\n  backgroundColor: \"#f2f2f2\",\n};\n","import React from 'react';\nimport {StyleSheet, Text, View, TouchableOpacity,Clipboard } from 'react-native';\nimport { FontAwesomeIcon } from '@fortawesome/react-native-fontawesome'\nimport { faCopy } from '@fortawesome/free-regular-svg-icons'\n\nimport Color from 'pigment/full';\n\nexport function ColorDetail(props) {\n  const styles = StyleSheet.create({\n    backgroundColor: {\n      backgroundColor: props.color, height: 200, alignSelf: 'stretch'\n    },\n    info: {\n      flexDirection: 'row',\n      justifyContent: 'space-between',\n      padding: 4,\n    },\n    colorNameText: {\n      fontSize: 16,\n      fontWeight: '500',\n    },\n  });\n  const color = new Color(props.color);\n  let items = \n    [\n      { key: 'HEX', value: color.tohex() },\n      { key: 'RGB', value: color.torgb() },\n      { key: 'HSL', value: color.tohsl() },\n      { key: 'HSV', value: color.tohsv() },\n      { key: 'HWB', value: color.tohwb() },\n      { key: 'CMYK', value: color.tocmyk() },\n      { key: 'CIELAB', value: color.tolab() },\n      { key: 'Luminance', value: (color.luminance() * 100).toFixed(2) + '%' },\n      { key: 'Darkness', value: (color.darkness() * 100).toFixed(2) + '%' },\n    ];\n  let writeToClipboard = function(value) {\n    Clipboard.setString(value);\n  }\n  return (\n    <View style={{flex: 1, flexDirection: 'column', padding: 8}}>\n      <View style={[styles.backgroundColor]} ></View>\n      {/* <Text {...props} style={[props.style, { fontFamily: 'space-mono' }]} >{props.color}</Text> */}\n      <View >\n        {items.map(item => (\n          <TouchableOpacity\n           key={item.key}\n           onPress={() => writeToClipboard(item.value)}\n          >  \n            <View style={styles.info}>\n              <Text style={styles.colorNameText}>{item.key} : </Text>\n              \n              <Text >{item.value}</Text>\n              <FontAwesomeIcon icon={ faCopy } />\n            </View>\n          </TouchableOpacity>\n        ))}\n        \n      </View>\n    </View>\n  );\n}\n","import React from 'react';\nimport { ScrollView, StyleSheet, Button} from 'react-native';\nimport { ColorDetail } from '../components/ColorDetails';\nimport CromaButton from '../components/CromaButton';\n\nexport default function ColorDetailScreen(props) {\n  const color = props.navigation.getParam(\"color\");\n  return (\n    <ScrollView style={styles.container}>\n      <ColorDetail navigation={props.navigation} color={color}>{color}</ColorDetail>\n      <CromaButton  \n        onPress={() => props.navigation.navigate(\"Palettes\", {\"color\": color})}\n      >See color palettes</CromaButton>\n    </ScrollView>\n  );\n}\n\nColorDetailScreen.navigationOptions = ({ navigation }) => {\n  return {\n    title: navigation.getParam('color'),\n  };\n};\n\nconst styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    paddingLeft: 12,\n    paddingRight: 12,\n  },\n});\n","import React from 'react';\nimport {Text, View} from 'react-native';\nimport { ColorPicker, fromHsv} from 'react-native-color-picker';\nimport CromaButton from './CromaButton';\n\nexport class CromaColorPicker extends React.Component {\n  constructor(props) { \n        super(props); \n        this.state = { color : '#4cb96b' };\n  } \n  render() {\n    return (\n    <View>\n      <ColorPicker \n      onColorChange={color => this.setState({color: fromHsv(color)})}\n      style={{height: 400}}/>\n      <Text>{this.state.color}</Text>\n      <CromaButton  \n        onPress={() =>  this.props.navigation.navigate(\"ColorDetails\", {\"color\": this.state.color})}\n      >SEE COLOR DETAILS</CromaButton>  \n    </View>\n    );\n\n  }\n}","import * as React from 'react';\nimport { StyleSheet, Animated} from 'react-native';\nimport Colors from '../constants/Colors';\nimport { TouchableOpacity } from 'react-native-gesture-handler';\n\nexport default class Card extends React.Component {\n  render() {\n    return (\n      <TouchableOpacity onPress={this.props.onPress} style={[styles.inner, this.props.style]}>\n        <Animated.View {...this.props}  >\n          {this.props.children}\n        </Animated.View>\n      </TouchableOpacity>\n    );\n  }\n}\n\nconst styles = StyleSheet.create({\n  inner: {\n    backgroundColor: Colors.white,\n    marginVertical: 4,\n    elevation: 1,\n    marginTop: 8,\n    marginBottom: 8,\n  },\n});","import * as React from 'react';\nimport { StyleSheet, View, Text } from 'react-native';\nexport default function MultiColorView(props) {\n  const styles = StyleSheet.create({\n    palette: {\n      alignItems: 'stretch',\n      flexDirection: 'row',\n      height: 100,\n    },\n    color: {\n      flex: 1,\n    },\n  });\n  return <View style={styles.palette}>\n    {props.colors.map(item => (\n      <View\n        style={[styles.color, { backgroundColor: item.color }]}\n        key={item.color}\n      />\n    ))}\n  </View>\n}\n","import * as React from 'react';\nimport { StyleSheet, View, Text } from 'react-native';\nimport Card from './Card';\nimport Colors from '../constants/Colors';\nimport MultiColorView from './MultiColorView';\n\nexport class PalettePreviewCard extends React.Component {\n  \n  render() {\n    return (\n      <Card {...this.props}>\n        <View>\n          <MultiColorView {...this.props}></MultiColorView>\n          <View style={styles.bottom}>\n            <Text style={styles.label}>{this.props.name}</Text>\n          </View>\n        </View>\n      </Card>\n    );\n  }\n}\n\nconst styles = StyleSheet.create({\n  bottom: {\n    flexDirection: 'row',\n    alignItems: 'center',\n  },\n  label: {\n    flex: 1,\n    marginHorizontal: 16,\n    color: Colors.darkGrey,\n  },\n});","import React from 'react';\nimport { ScrollView, StyleSheet, Text} from 'react-native';\nimport Color from 'pigment/full';\nimport {PalettePreviewCard} from '../components/PalettePreviewCard';\nexport default function PalettesScreen(props) {\n  // Convert camelCase to sentence\n  const parseCamelCase = (text) => {\n    if (typeof text !== 'string') {\n        return '';\n    }\n    return text\n    .replace(/([a-z])([A-Z])/g, '$1 $2')\n    .replace(/\\b([A-Z]+)([A-Z])([a-z])/, '$1 $2$3')\n    .replace(/^./, (str) => str.toUpperCase());\n  }\n  const color = new Color(props.navigation.getParam(\"color\"));\n  let items = [];\n  for (const i in color) {\n    if ((/.*scheme$/i).test(i) && typeof color[i] === 'function') {\n      let colors = [];\n      const paletteColors = color[i]();\n      paletteColors.forEach((c)=> \n        colors.push({color: c.tohex()})\n      );\n     // console.log(\"colors================\" + JSON.stringify(colors));\n      items.push(<PalettePreviewCard onPress={() => props.navigation.navigate(\"ColorList\", {colors: colors})} \n        key={i.toString()} colors={colors} name={parseCamelCase(i.toString())}></PalettePreviewCard>)\n    }\n  }\n  return (\n    <ScrollView style={styles.container}>\n      {items}\n    </ScrollView>\n  );\n}\n\n \n\nPalettesScreen.navigationOptions = ({ navigation }) => {\n  return {\n    title: navigation.getParam('color'),\n  };\n};\n\nconst styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    paddingLeft: 12,\n    paddingRight: 12,\n    backgroundColor: '#fff',\n  },\n});\n","import React from 'react';\nimport { ScrollView, StyleSheet, Button, Alert, View} from 'react-native';\nimport { AddPalette } from '../components/AddPalette';\n\nexport default function AddPaletteScreen(props) {\n\n  return (\n    <ScrollView contentContainerStyle={styles.container}>\n      <AddPalette navigation={props.navigation}></AddPalette>\n    </ScrollView>\n  );\n}\n\nAddPaletteScreen.navigationOptions = {\n   title: 'Add new palette',\n};\n\nconst styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    marginLeft: 12,\n    marginRight: 12,\n    justifyContent:'center',\n  },\n});\n","import {AsyncStorage} from 'react-native';\nconst ALL_PALETTES = \"ALL_PALETTES\";\nexport default class Storage {\n  \n  static save = async (colorPalette) => {\n    // TODO: exception handling \n    let palettes = await AsyncStorage.getItem(ALL_PALETTES);\n    if (!palettes) {\n      palettes = JSON.stringify({});\n    }\n    palettes = JSON.parse(palettes);\n    palettes[colorPalette.name] = colorPalette;\n\n    await AsyncStorage.setItem(ALL_PALETTES, JSON.stringify(palettes));\n    return palettes;\n  }\n\n  static getAllPalettes = async () => {\n    let palettes = await AsyncStorage.getItem(ALL_PALETTES);\n    console.log(\"Palettes returned from storage: \", palettes);\n    if (palettes) {\n      return JSON.parse(palettes);\n    } else {\n      return {};\n    }\n  }\n}","import React from \"react\";\nimport { Text, View, StyleSheet, TextInput } from \"react-native\";\nimport { ScrollView } from \"react-native-gesture-handler\";\nimport Colors from \"../constants/Colors\";\nimport Storage from '../libs/Storage';\n\n\nexport class SavePalette extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = { paletteName: \"\", colors: this.props.navigation.getParam(\"colors\") || [] };\n  }\n  render() {\n    console.log(\"this.props.natigation: \", this.props.navigation);\n    return (\n      <ScrollView>\n        <View style={styles.card}>\n          <Text style={styles.label}>ADD NEW PALETTE</Text>\n          <TextInput\n            style={styles.input}\n            placeholder=\"Enter a name for the palette\"\n            onChangeText={name => this.setState({ paletteName: name})}\n          />\n        </View>\n        <CromaButton onPress={() => {\n            Storage.save({name: this.state.paletteName, colors: this.state.colors}).then(() => this.props.navigation.navigate(\"Home\"));\n          }} >\n            Save palette\n        </CromaButton>\n      </ScrollView>\n    );\n  }\n}\n\nconst styles = StyleSheet.create({\n  card: {\n    flex: 1,\n    flexDirection: \"column\",\n    justifyContent: \"center\",\n    shadowColor: \"rgba(0,0,0, .4)\",\n    shadowOffset: { height: 1, width: 1 },\n    shadowOpacity: 1,\n    shadowRadius: 1,\n    backgroundColor: \"#fff\",\n    elevation: 2,\n    height: 80,\n    margin: 10,\n    padding: 10\n  },\n  label: {\n    flex: 1,\n    color: Colors.darkGrey\n  },\n  input: {\n    flex: 1,\n    borderBottomColor: \"black\",\n    borderBottomWidth: 1,\n  }\n});\n\n","import * as React from 'react';\nimport { View, StyleSheet, Text } from 'react-native';\n\nexport class SingleColorView extends React.Component {\n  render() {\n    return (\n      <View style={[styles.container, {backgroundColor: this.props.color}]}>\n        <Text style={styles.colorText}>{this.props.color}</Text>\n      </View>\n    );\n  }\n}\n\nconst styles = StyleSheet.create({\n  container: {\n    height: 40,\n    flex: 1,\n    justifyContent: \"center\",\n    alignItems: \"center\",\n  },\n  colorText: {\n    fontWeight: \"700\",\n    backgroundColor: \"rgba(255, 255, 255, .3)\",\n    paddingLeft: 5,\n    paddingRight: 5,\n  }\n});","import React from 'react';\nimport {SingleColorView} from '../components/SingleColorView';\nimport {ScrollView, TouchableOpacity, StyleSheet, Text} from 'react-native'\nimport CromaButton from '../components/CromaButton';\n\nexport default function ColorListScreen(props) {\n  const colors = props.navigation.getParam(\"colors\");\n  console.log(\"Colors:\" + JSON.stringify(colors));\n  return (\n    <ScrollView style={styles.listview} >\n      {colors.map(color => <SingleColorView color={color.color}></SingleColorView>)}\n      <CromaButton\n          onPress={() => props.navigation.navigate('SavePalette', {colors: colors})}>\n          SAVE AS NEW PALETTE\n      </CromaButton>\n    </ScrollView>\n  );\n}\nColorListScreen.navigationOptions = {\n  title: 'Colors',\n};\n\nconst styles = StyleSheet.create({\n  listview: {\n    margin: 8,\n  }\n});","import * as React from 'react';\nimport { StyleSheet, View, Text } from 'react-native';\nimport Card from './Card';\nimport Colors from '../constants/Colors';\nimport { FontAwesomeIcon } from '@fortawesome/react-native-fontawesome'\nimport { faTrashAlt } from '@fortawesome/free-solid-svg-icons'\nimport { TouchableOpacity } from 'react-native-gesture-handler';\n\n\nexport default class SingleColorCard extends React.Component {\n  \n  render() {\n    return (\n      <Card {...this.props}>\n        <View>\n          <View style={{backgroundColor: this.props.color, height: 100}}></View>\n          <View style={styles.bottom}>\n            <Text style={styles.label}>{this.props.name}</Text>\n            <View style={styles.actionButtonsView}>\n              <TouchableOpacity style={styles.actionButton}>\n                <FontAwesomeIcon icon={ faTrashAlt } />\n              </TouchableOpacity>\n            </View>\n          </View>\n        </View>\n      </Card>\n    );\n  }\n}\n\nconst styles = StyleSheet.create({\n  bottom: {\n    flexDirection: 'row',\n    alignItems: 'center',\n    paddingTop: 8,\n    height: 36,\n  },\n  actionButtonsView: {\n    flexDirection: \"row\",\n    alignItems: \"flex-end\",\n    \n  },\n  actionButton: {\n    paddingRight: 16,\n  },\n  label: {\n    flex: 1,\n    marginHorizontal: 16,\n    color: Colors.darkGrey,\n  },\n});","import React from 'react';\nimport SingleColorCard from '../components/SingleColorCard';\nimport {ScrollView,  StyleSheet} from 'react-native'\n\nexport default function PaletteScreen(props) {\n  const colors = props.navigation.getParam(\"colors\");\n  console.log(\"Colors:\" + JSON.stringify(colors));\n  return (\n    <ScrollView style={styles.listview} >\n      {\n        colors.map(colorObj => <SingleColorCard onPress={() =>  props.navigation.navigate(\"ColorDetails\", {\"color\": colorObj.color})} color={colorObj.color}></SingleColorCard>)\n      }\n    </ScrollView>\n  );\n}\nPaletteScreen.navigationOptions = ({ navigation }) => {\n  return {\n    title: navigation.getParam('name'),\n  };\n};\n\nconst styles = StyleSheet.create({\n  listview: {\n    margin: 8,\n  }\n});","import React from \"react\";\nimport {\n  View,\n  StyleSheet,\n} from \"react-native\";\nimport CromaButton from \"./CromaButton\";\n\nexport class PaletteList extends React.Component {\n  render() {\n    return (\n      <View style={styles.inputsContainer}>\n        <CromaButton\n          onPress={() => this.props.navigation.navigate(\"AddPalette\")}\n        >\n          Add new palette\n        </CromaButton>\n      </View>\n    );\n  }\n}\n\nconst styles = StyleSheet.create({\n  inputsContainer: {\n    flex: 1,\n    justifyContent: \"center\"\n  }\n});\n","import * as React from 'react';\nimport { StyleSheet, View, Text } from 'react-native';\nimport Card from './Card';\nimport Colors from '../constants/Colors';\nimport MultiColorView from './MultiColorView';\nimport { FontAwesomeIcon } from '@fortawesome/react-native-fontawesome'\nimport { faTrashAlt, faShareSquare, faEdit } from '@fortawesome/free-solid-svg-icons'\nimport { TouchableOpacity } from 'react-native-gesture-handler';\n\n\nexport class PaletteCard extends React.Component {\n  \n  constructor(props) {\n    super(props);\n  }\n\n  render() {\n    return (\n      <Card {...this.props} onPress={() => {\n          console.log(\"navigate to palette screen\" + this.props.navigation);\n          this.props.navigation.navigate('Palette', this.props);\n        }}>\n        <View>\n          <MultiColorView {...this.props}></MultiColorView>\n          <View style={styles.bottom}>\n            <Text style={styles.label}>{this.props.name}</Text>\n            <View style={styles.actionButtonsView}>\n              <TouchableOpacity style={styles.actionButton}>\n                <FontAwesomeIcon icon={ faEdit } />\n              </TouchableOpacity>\n              <TouchableOpacity style={styles.actionButton}>\n                <FontAwesomeIcon icon={ faShareSquare } />\n              </TouchableOpacity >\n              <TouchableOpacity style={styles.actionButton}>\n                <FontAwesomeIcon icon={ faTrashAlt } />\n              </TouchableOpacity>\n            </View>\n          </View>\n        </View>\n      </Card>\n    );\n  }\n}\n\nconst styles = StyleSheet.create({\n  bottom: {\n    flexDirection: 'row',\n    alignItems: 'center',\n    paddingTop: 8,\n    height: 36,\n  },\n  actionButtonsView: {\n    flexDirection: \"row\",\n    alignItems: \"flex-end\",\n    \n  },\n  actionButton: {\n    paddingRight: 16,\n  },\n  label: {\n    flex: 1,\n    marginHorizontal: 16,\n    color: Colors.darkGrey,\n  },\n});","import React from 'react';\nimport { ScrollView, View, StyleSheet, ActivityIndicator} from 'react-native';\nimport { PaletteList } from '../components/PaletteList';\nimport {PaletteCard} from '../components/PaletteCard';\nimport Storage from '../libs/Storage';\n\nexport default class HomeScreen extends React.Component {\n\n  constructor(props) {\n    super(props);\n    this.state = {isLoading: true};\n  }\n\n  componentDidMount() {\n    Storage.getAllPalettes().then((allPalettes) => {\n      this.setState({allPalettes: allPalettes, isLoading: false});\n    });\n  }\n\n  render() {\n    console.log(\"State: \" + JSON.stringify(this.state));\n    if (this.state.isLoading) {\n      return <ActivityIndicator></ActivityIndicator>\n    } else {\n      return (\n        <ScrollView contentContainerStyle={styles.container}>\n          {Object.keys(this.state.allPalettes).map((name) => {\n            console.log(\"name: \", name, this.state.allPalettes[name].colors);\n            return <PaletteCard colors={this.state.allPalettes[name].colors} name={name} navigation={this.props.navigation}></PaletteCard>\n          })}\n          <View\n            style={{\n              borderBottomColor: 'black',\n              borderBottomWidth: 1,\n            }}\n          />\n          <PaletteList navigation={this.props.navigation}></PaletteList>\n        </ScrollView>\n      );\n    }\n  }\n}\n\nHomeScreen.navigationOptions = {\n   title: 'Croma',\n};\n\nconst styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    paddingLeft: 0,\n    paddingRight: 0,\n    backgroundColor: '#fff',\n    justifyContent:'center',\n  },\n});\n","import React from 'react';\nimport { Platform } from 'react-native';\nimport { createStackNavigator } from 'react-navigation';\nimport { createAppContainer } from 'react-navigation';\nimport ColorDetailsScreen from '../screens/ColorDetailScreen'\nimport ColorPickerScreen from '../screens/ColorPickerScreen'\nimport PalettesScreen from '../screens/PalettesScreen';\nimport AddPaletteScreen from '../screens/AddPaletteScreen';\nimport SavePaletteScreen from '../screens/SavePaletteScreen';\nimport ColorListScreen from '../screens/ColorListScreen';\nimport PaletteScreen from '../screens/PaletteScreen';\nimport HomeScreen from '../screens/HomeScreen'\nimport Colors from '../constants/Colors'\n\nconst config = Platform.select({\n  web: { headerMode: 'screen' },\n  default: {},\n});\nconst RootStack = createStackNavigator(\n  {\n    ColorDetails: ColorDetailsScreen,\n    ColorPicker: ColorPickerScreen,\n    Palettes: PalettesScreen,\n    AddPalette: AddPaletteScreen,\n    SavePalette: SavePaletteScreen,\n    ColorList: ColorListScreen,\n    Palette: PaletteScreen,\n    Home: HomeScreen,\n  },\n  {\n    initialRouteName: 'Home',\n    /* The header config from HomeScreen is now here */\n    defaultNavigationOptions: {\n      headerStyle: {\n        backgroundColor: Colors.primary,\n      },\n      headerTintColor: '#fff',\n    },\n  }\n);\n\nconst AppContainer = createAppContainer(RootStack);\n\nexport default RootStack;\n","import React from 'react';\nimport { CromaColorPicker } from '../components/CromaColorPicker';\nimport {ScrollView} from 'react-native'\n\n\nexport default function ColorPickerScreen(props) {\n  return (\n    <ScrollView >\n      <CromaColorPicker navigation={props.navigation}></CromaColorPicker> \n    </ScrollView>\n  );\n}\n","import React from \"react\";\nimport {\n  ScrollView\n} from \"react-native\";\nimport { SavePalette } from \"../components/SavePalette\";\n\nexport default function SavePaletteScreen(props) {\n  console.log(props)\n  return (\n      <ScrollView>\n        <SavePalette navigation={props.navigation}></SavePalette>\n    </ScrollView>\n  );\n}\n","import { createBrowserApp } from '@react-navigation/web';\nimport { createSwitchNavigator } from 'react-navigation';\n\nimport MainTabNavigator from './MainTabNavigator';\n\nconst switchNavigator = createSwitchNavigator({\n  // You could add another route here for authentication.\n  // Read more at https://reactnavigation.org/docs/en/auth-flow.html\n  Main: MainTabNavigator,\n});\nswitchNavigator.path = '';\n\nexport default createBrowserApp(switchNavigator, { history: 'hash' });\n","import { AppLoading } from 'expo';\nimport { Asset } from 'expo-asset';\nimport * as Font from 'expo-font';\nimport React, { useState } from 'react';\nimport { Platform, StatusBar, StyleSheet, View, Dimensions } from 'react-native';\nimport { Ionicons } from '@expo/vector-icons';\nimport Colors from './constants/Colors'\nimport AppNavigator from './navigation/AppNavigator';\n\nexport default function App(props) {\n  const [isLoadingComplete, setLoadingComplete] = useState(false);\n  const {height, width} = Dimensions.get('window');\n  console.log(\"height\", height, \"width\", width);\n  if (!isLoadingComplete && !props.skipLoadingScreen) {\n    return (\n      <AppLoading\n        startAsync={loadResourcesAsync}\n        onError={handleLoadingError}\n        onFinish={() => handleFinishLoading(setLoadingComplete)}\n      />\n    );\n  } else {\n    return (\n      <View style={[styles.container]}>\n      <View style={[{width: Platform.OS=='web' ? Math.min(600, width): width}]}>\n        {Platform.OS === 'ios' && <StatusBar barStyle=\"default\" />}\n        <AppNavigator />\n      </View>\n      </View>\n    );\n  }\n} \n\nasync function loadResourcesAsync() {\n  await Promise.all([\n    Asset.loadAsync([\n      require('./assets/images/robot-dev.png'),\n      require('./assets/images/robot-prod.png'),\n    ]),\n    Font.loadAsync({\n      // This is the font that we are using for our tab bar\n      ...Ionicons.font,\n      // We include SpaceMono because we use it in HomeScreen.js. Feel free to\n      // remove this if you are not using it in your app\n      'space-mono': require('./assets/fonts/SpaceMono-Regular.ttf'),\n    }),\n  ]);\n}\n\nfunction handleLoadingError(error) {\n  // In this case, you might want to report the error to your error reporting\n  // service, for example Sentry\n  console.warn(error);\n}\n\nfunction handleFinishLoading(setLoadingComplete) {\n  setLoadingComplete(true);\n}\n\nconst styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    justifyContent: \"center\",\n    backgroundColor: Colors.backgroundColor,\n    flexDirection: \"row\",\n  },\n});\n","/* eslint-env browser */\n\nif ('serviceWorker' in navigator) {\n  window.addEventListener('load', function() {\n    navigator.serviceWorker\n      .register('/expo-service-worker.js', { scope: '/' })\n      .then(function(info) {\n        // console.info('Registered service-worker', info);\n      })\n      .catch(function(error) {\n        console.info('Failed to register service-worker', error);\n      });\n  });\n}\n","module.exports = __webpack_public_path__ + \"static/media/robot-dev.54da1e98.png\";","module.exports = __webpack_public_path__ + \"static/media/robot-prod.c7578911.png\";","module.exports = __webpack_public_path__ + \"./fonts/SpaceMono-Regular.ttf\";","import * as React from 'react';\nimport { StyleSheet, Text} from 'react-native';\nimport { TouchableOpacity } from 'react-native-gesture-handler';\n\nexport default class CromaButton extends React.Component {\n  render() {\n    return (\n      <TouchableOpacity style={[styles.button, this.props.style]} onPress={this.props.onPress} >\n          <Text style={{ textTransform: 'uppercase'}}>  {this.props.children} </Text>\n      </TouchableOpacity>\n    );\n  }\n}\n\nconst styles = StyleSheet.create({\n  button: {\n    shadowColor: 'rgba(0,0,0, .4)',\n    shadowOffset: { height: 1, width: 1 },\n    shadowOpacity: 1,\n    shadowRadius: 1,\n    backgroundColor: '#fff',\n    elevation: 2,\n    height: 50,\n    marginTop: 10,\n    marginBottom: 10,\n    justifyContent: 'center',\n    alignItems: 'center',\n    flexDirection: 'column',\n  },\n});"],"sourceRoot":""}