{"version":3,"sources":["/home/kamal/Projects/react/croma/libs/ColorPicker.js","/home/kamal/Projects/react/croma/components/AddPalette.js","/home/kamal/Projects/react/croma/constants/Colors.js","/home/kamal/Projects/react/croma/components/ColorDetails.js","/home/kamal/Projects/react/croma/screens/ColorDetailScreen.js","/home/kamal/Projects/react/croma/components/CromaColorPicker.js","/home/kamal/Projects/react/croma/components/Card.js","/home/kamal/Projects/react/croma/components/MultiColorView.js","/home/kamal/Projects/react/croma/components/PalettePreviewCard.js","/home/kamal/Projects/react/croma/screens/PalettesScreen.js","/home/kamal/Projects/react/croma/screens/AddPaletteScreen.js","/home/kamal/Projects/react/croma/components/AddPaletteManually.js","/home/kamal/Projects/react/croma/components/SingleColorView.js","/home/kamal/Projects/react/croma/screens/ColorListScreen.js","/home/kamal/Projects/react/croma/components/SingleColorCard.js","/home/kamal/Projects/react/croma/screens/PaletteScreen.js","/home/kamal/Projects/react/croma/components/PaletteList.js","/home/kamal/Projects/react/croma/components/PaletteCard.js","/home/kamal/Projects/react/croma/screens/HomeScreen.js","/home/kamal/Projects/react/croma/navigation/MainTabNavigator.js","/home/kamal/Projects/react/croma/screens/ColorPickerScreen.js","/home/kamal/Projects/react/croma/screens/AddPaletteManuallyScreen.js","/home/kamal/Projects/react/croma/navigation/AppNavigator.web.js","/home/kamal/Projects/react/croma/App.js","/home/kamal/Projects/react/croma/web-build/register-service-worker.js","/home/kamal/Projects/react/croma/assets/images/robot-dev.png","/home/kamal/Projects/react/croma/assets/images/robot-prod.png","/home/kamal/Projects/react/croma/assets/fonts/SpaceMono-Regular.ttf","/home/kamal/Projects/react/croma/components/CromaButton.js"],"names":["ColorPicker","image","console","log","resize","Jimp","AUTO","data","_prepareDataForKmeans","time","Date","now","ans","kmeans","initialization","maxIterations","JSON","stringify","centroids","sort","c1","c2","size","kmeansColors","map","centroid","Color","_labToHex","this","_getFinalColors","c","color","tohex","_toArray","tohsv","filteredColors","i","length","colorList","j","push","finalColors","lab","bitmap","width","height","intColor","getPixelColor","hex","_toHexColor","xyz","tolab","substr","split","v","parseFloat","rgba","intToRGBA","r","g","b","index","indexOf","AddPalette","getPermissionAsync","a","async","Constants","platform","ios","Permissions","status","alert","_pickImage","ImagePicker","mediaTypes","All","quality","base64","undefined","result","read","Buffer","then","props","navigation","navigate","colors","getProminentColors","catch","err","uri","onPress","style","styles","buttonPro","Alert","React","Component","StyleSheet","create","backgroundColor","ColorDetail","alignSelf","info","flexDirection","justifyContent","padding","colorNameText","fontSize","fontWeight","items","key","value","torgb","tohsl","tohwb","tocmyk","luminance","toFixed","darkness","View","flex","item","TouchableOpacity","Clipboard","setString","Text","icon","faCopy","ColorDetailScreen","getParam","ScrollView","container","CromaButton","navigationOptions","title","paddingLeft","paddingRight","CromaColorPicker","state","onColorChange","setState","fromHsv","Card","inner","Animated","children","Colors","marginVertical","elevation","marginTop","marginBottom","MultiColorView","palette","alignItems","PalettePreviewCard","bottom","label","name","marginHorizontal","PalettesScreen","test","text","forEach","toString","replace","str","toUpperCase","AddPaletteScreen","contentContainerStyle","marginLeft","marginRight","AddPaletteManually","card","TextInput","input","placeholder","onChangeText","Button","shadowColor","shadowOffset","shadowOpacity","shadowRadius","margin","borderBottomColor","borderBottomWidth","SingleColorView","colorText","ColorListScreen","listview","SingleColorCard","actionButtonsView","actionButton","faTrashAlt","paddingTop","PaletteScreen","PaletteList","inputsContainer","PaletteCard","faEdit","faShareSquare","HomeScreen","RootStack","Platform","select","web","headerMode","default","createStackNavigator","ColorDetails","ColorDetailsScreen","Palettes","ColorList","Palette","Home","initialRouteName","defaultNavigationOptions","headerStyle","headerTintColor","createAppContainer","switchNavigator","createSwitchNavigator","Main","MainTabNavigator","path","createBrowserApp","history","App","useState","isLoadingComplete","setLoadingComplete","Dimensions","get","skipLoadingScreen","OS","Math","min","StatusBar","barStyle","AppLoading","startAsync","loadResourcesAsync","onError","handleLoadingError","onFinish","handleFinishLoading","Promise","all","Asset","loadAsync","require","Font","Ionicons","font","error","warn","navigator","window","addEventListener","serviceWorker","register","scope","module","exports","button","textTransform"],"mappings":"4MAGqBA,E,gGACOC,GAAQ,IAAD,OAC/BC,QAAQC,IAAI,UAAYF,GASxBA,EAAMG,OAAOC,IAAKC,KAAM,KACxB,IAAIC,EAAOP,EAAYQ,sBAAsBP,GACzCQ,EAAOC,KAAKC,MACZC,EAAMC,YAAON,EAAM,GAAI,CAAEO,eAAgB,SAAUC,cAAe,KACtEb,QAAQC,IAAIa,KAAKC,UAAUL,GAAO,KAAOF,KAAKC,MAAQF,GAAQ,OAC9DG,EAAIM,UAAYN,EAAIM,UAAUC,MAAK,SAACC,EAAIC,GAAL,OAAYA,EAAGC,KAAOF,EAAGE,QAC5DpB,QAAQC,IAAIS,EAAIM,WAChB,IAAIK,EAAgBX,EAAIM,UAAUM,KAAI,SAAAC,GAAa,OAAO,IAAIC,IAAM,EAAKC,UAAUF,EAASA,cAC5F,OAAOG,KAAKC,gBAAgBN,GAAcC,KAAI,SAAAM,GAAM,MAAO,CAACC,MAAOD,EAAEE,c,sCAGhDT,GAAe,IAAD,OACnCrB,QAAQC,IAAI,yBAA0BoB,GACtCA,EAAaJ,MAAK,SAACC,EAAIC,GAAL,OAAY,EAAKY,SAASb,EAAGc,SAAS,GAAK,EAAKD,SAASZ,EAAGa,SAAS,MAEvF,IADA,IAAIC,EAAiB,GACZC,EAAI,EAAEA,EAAIb,EAAac,OAAQD,GAAK,EAAG,CAE9C,IADA,IAAIE,EAAY,GACPC,EAAI,EAAGA,EAAI,EAAGA,IACrBD,EAAUE,KAAKjB,EAAaa,EAAIG,IAElCD,EAAUnB,MAAK,SAACC,EAAIC,GAAL,OAAY,EAAKY,SAASb,EAAGc,SAAS,GAAK,EAAKD,SAASZ,EAAGa,SAAS,MACpFC,EAAeK,KAAKF,EAAUA,EAAUD,OAAS,IACjDF,EAAeK,KAAKF,EAAUA,EAAUD,OAAS,IAEnDnC,QAAQC,IAAI,mBAAqBgC,GAEjC,IADA,IAAIM,EAAc,GACTL,EAAI,EAAEA,EAAID,EAAeE,OAAQD,GAAK,EACzCR,KAAKK,SAASE,EAAeC,GAAGF,SAAS,GAAKN,KAAKK,SAASE,EAAeC,EAAI,GAAGF,SAAS,GAC7FO,EAAYD,KAAKL,EAAeC,IAEhCK,EAAYD,KAAKL,EAAeC,EAAI,IAGxC,OAAOK,I,gCAGQC,GAEf,OADY,IAAIhB,IAAM,OAASgB,EAAI,GAAK,KAAOA,EAAI,GAAK,KAAOA,EAAI,GAAM,KAC5DV,U,4CAGc/B,GAC3B,IAAIM,EAAO,GAEXL,QAAQC,IAAI,oBAAqBF,EAAM0C,OAAOC,MAAO3C,EAAM0C,OAAOE,QAClE,IAAK,IAAIT,EAAI,EAAGA,EAAInC,EAAM0C,OAAOC,MAAOR,IACtC,IAAK,IAAIG,EAAI,EAAGA,EAAItC,EAAM0C,OAAOE,OAAQN,IAAK,CAC5C,IAAIO,EAAW7C,EAAM8C,cAAcX,EAAGG,GAClCS,EAAMpB,KAAKqB,YAAYH,GAC3B5C,QAAQC,IAAI,OAAQ6C,GACpB,IACIE,EADQ,IAAIxB,IAAMsB,GACNG,QAEhBD,EAAMA,EAAIE,OAAO,EAAGF,EAAIb,OAAS,GAAGgB,MAAM,MAAM7B,KAAI,SAAA8B,GAAC,OAAIC,WAAWD,MACpE/C,EAAKiC,KAAKU,GAId,OAAO3C,I,kCAGUuC,GACjB,IAAIU,EAAOnD,IAAKoD,UAAUX,GAE1B,OADY,IAAIpB,IAAM,OAAS8B,EAAKE,EAAI,KAAOF,EAAKG,EAAI,KAAOH,EAAKI,EAAI,KAC3D5B,U,+BAGCD,GACd,IAAI8B,EAAQ9B,EAAM+B,QAAQ,KAE1B,OADA/B,EAAQA,EAAMqB,OAAOS,EAAQ,EAAG9B,EAAMM,OAASwB,IAClCR,MAAM,MAAM7B,KAAI,SAAAM,GAAC,OAAIyB,WAAWzB,U,wSCvEpCiC,EAAb,mLAqCEC,mBAAqB,0BAAAC,EAAAC,OAAA,oDACfC,IAAUC,SAASC,IADJ,kCAAAJ,EAAA,MAEQK,IAAqBA,MAF7B,gBAGF,YAHE,EAETC,QAENC,MAAM,6DAJS,sCArCvB,EA8CEC,WAAa,0BAAAR,EAAAC,OAAA,kEAAAD,EAAA,MACQS,IAAoC,CACrDC,WAAYD,IAA6BE,IACzCC,QAAS,EACTC,QAAQ,KAJC,YAOUC,KANjBC,EADO,QAODF,OACVzE,IAAK4E,KAAK,IAAIC,EAAOF,EAAOF,OAAQ,WACnCK,MAAK,SAAAlF,GACJ,EAAKmF,MAAMC,WAAWC,SAAS,YAAa,CAACC,OAAQvF,IAAYwF,mBAAmBvF,QAErFwF,OAAM,SAAAC,GACLxF,QAAQC,IAAI,UAAYa,KAAKC,UAAUyE,OAIzCrF,IAAK4E,KAAKD,EAAOW,KACdR,MAAK,SAAAlF,GACJ,EAAKmF,MAAMC,WAAWC,SAAS,YAAa,CAACC,OAAQvF,IAAYwF,mBAAmBvF,QAErFwF,OAAM,SAAAC,GACLxF,QAAQC,IAAI,UAAYa,KAAKC,UAAUyE,OAtBhC,sCA9Cf,wDAEY,IAAD,OACP,OACE,kBAAC,IAAD,KACE,kBAAC,IAAD,CACEE,QAAS,WACP,EAAKnB,eAFT,0BAOA,kBAAC,IAAD,CACEmB,QAAS,kBAAM,EAAKR,MAAMC,WAAWC,SAAS,iBADhD,0BAKA,kBAAC,IAAD,CACEM,QAAS,kBAAM,EAAKR,MAAMC,WAAWC,SAAS,wBADhD,uBAMA,kBAAC,IAAD,CACEO,MAAOC,EAAOC,UACdH,QAAS,kBAAMI,IAAMxB,MAAM,gBAF7B,iBAvBR,0CAkCI5C,KAAKoC,yBAlCT,GAAgCiC,IAAMC,WA2EhCJ,EAASK,IAAWC,OAAO,CAC/BL,UAAW,CACTM,gBAAiB,e,4MCxFN,EAWJ,UAXI,EAgBH,OAhBG,EAkBN,OAlBM,EAqBI,U,qFChBZ,SAASC,EAAYlB,GAC1B,IAAMU,EAASK,IAAWC,OAAO,CAC/BC,gBAAiB,CACfA,gBAAiBjB,EAAMrD,MAAOc,OAAQ,IAAK0D,UAAW,WAExDC,KAAM,CACJC,cAAe,MACfC,eAAgB,gBAChBC,QAAS,GAEXC,cAAe,CACbC,SAAU,GACVC,WAAY,SAGV/E,EAAQ,IAAIL,IAAM0D,EAAMrD,OAC1BgF,EACF,CACE,CAAEC,IAAK,MAAOC,MAAOlF,EAAMC,SAC3B,CAAEgF,IAAK,MAAOC,MAAOlF,EAAMmF,SAC3B,CAAEF,IAAK,MAAOC,MAAOlF,EAAMoF,SAC3B,CAAEH,IAAK,MAAOC,MAAOlF,EAAMG,SAC3B,CAAE8E,IAAK,MAAOC,MAAOlF,EAAMqF,SAC3B,CAAEJ,IAAK,OAAQC,MAAOlF,EAAMsF,UAC5B,CAAEL,IAAK,SAAUC,MAAOlF,EAAMoB,SAC9B,CAAE6D,IAAK,YAAaC,OAA4B,IAApBlF,EAAMuF,aAAmBC,QAAQ,GAAK,KAClE,CAAEP,IAAK,WAAYC,OAA2B,IAAnBlF,EAAMyF,YAAkBD,QAAQ,GAAK,MAKpE,OACE,kBAACE,EAAA,EAAD,CAAM5B,MAAO,CAAC6B,KAAM,EAAGjB,cAAe,SAAUE,QAAS,IACvD,kBAACc,EAAA,EAAD,CAAM5B,MAAO,CAACC,EAAOO,mBAErB,kBAACoB,EAAA,EAAD,KACGV,EAAMvF,KAAI,SAAAmG,GAAI,OACb,kBAACC,EAAA,EAAD,CACCZ,IAAKW,EAAKX,IACVpB,QAAS,kBAXcqB,EAWSU,EAAKV,WAV5CY,IAAUC,UAAUb,GADC,IAASA,IAatB,kBAACQ,EAAA,EAAD,CAAM5B,MAAOC,EAAOU,MAClB,kBAACuB,EAAA,EAAD,CAAMlC,MAAOC,EAAOc,eAAgBe,EAAKX,IAAzC,OAEA,kBAACe,EAAA,EAAD,KAAQJ,EAAKV,OACb,kBAAC,IAAD,CAAiBe,KAAOC,a,YC/CvB,SAASC,EAAkB9C,GACxC,IAAMrD,EAAQqD,EAAMC,WAAW8C,SAAS,SACxC,OACE,kBAACC,EAAA,EAAD,CAAYvC,MAAOC,EAAOuC,WACxB,kBAAC/B,EAAD,CAAajB,WAAYD,EAAMC,WAAYtD,MAAOA,GAAQA,GAC1D,kBAACuG,EAAA,EAAD,CACE1C,QAAS,kBAAMR,EAAMC,WAAWC,SAAS,WAAY,CAAC,MAASvD,MADjE,uBAONmG,EAAkBK,kBAAoB,YACpC,MAAO,CACLC,MAFsD,EAAjBnD,WAEnB8C,SAAS,WAI/B,IAAMrC,EAASK,IAAWC,OAAO,CAC/BiC,UAAW,CACTX,KAAM,EACNe,YAAa,GACbC,aAAc,M,yFCtBLC,EAAb,YACE,WAAYvD,GAAQ,IAAD,sBACb,4BAAMA,KACDwD,MAAQ,CAAE7G,MAAQ,WAFV,EADrB,sDAKY,IAAD,OACP,OACA,kBAAC0F,EAAA,EAAD,KACE,kBAAC,IAAD,CACAoB,cAAe,SAAA9G,GAAK,OAAI,EAAK+G,SAAS,CAAC/G,MAAOgH,YAAQhH,MACtD8D,MAAO,CAAChD,OAAQ,OAChB,kBAACkF,EAAA,EAAD,KAAOnG,KAAKgH,MAAM7G,OAClB,kBAACuG,EAAA,EAAD,CACE1C,QAAS,kBAAO,EAAKR,MAAMC,WAAWC,SAAS,eAAgB,CAAC,MAAS,EAAKsD,MAAM7G,UADtF,0BAZN,GAAsCkE,IAAMC,W,mBCAvB8C,E,yIAEjB,OACE,gBAAC,IAAD,CAAkBpD,QAAShE,KAAKwD,MAAMQ,QAASC,MAAO,CAACC,EAAOmD,MAAOrH,KAAKwD,MAAMS,QAC9E,gBAACqD,EAAA,EAASzB,KAAS7F,KAAKwD,MACrBxD,KAAKwD,MAAM+D,e,GALYlD,aAY5BH,EAASK,IAAWC,OAAO,CAC/B6C,MAAO,CACL5C,gBAAiB+C,EACjBC,eAAgB,EAChBC,UAAW,EACXC,UAAW,EACXC,aAAc,KCrBH,SAASC,GAAerE,GACrC,IAAMU,EAASK,IAAWC,OAAO,CAC/BsD,QAAS,CACPC,WAAY,UACZlD,cAAe,MACf5D,OAAQ,KAEVd,MAAO,CACL2F,KAAM,KAGV,OAAO,gBAACD,EAAA,EAAD,CAAM5B,MAAOC,EAAO4D,SACxBtE,EAAMG,OAAO/D,KAAI,SAAAmG,GAAI,OACpB,gBAACF,EAAA,EAAD,CACE5B,MAAO,CAACC,EAAO/D,MAAO,CAAEsE,gBAAiBsB,EAAK5F,QAC9CiF,IAAKW,EAAK5F,YCXX,IAAM6H,GAAb,yIAGI,OACE,gBAAC,EAAShI,KAAKwD,MACb,gBAACqC,EAAA,EAAD,KACE,gBAACgC,GAAmB7H,KAAKwD,OACzB,gBAACqC,EAAA,EAAD,CAAM5B,MAAOC,GAAO+D,QAClB,gBAAC9B,EAAA,EAAD,CAAMlC,MAAOC,GAAOgE,OAAQlI,KAAKwD,MAAM2E,aARnD,GAAwC9D,aAgBlCH,GAASK,IAAWC,OAAO,CAC/ByD,OAAQ,CACNpD,cAAe,MACfkD,WAAY,UAEdG,MAAO,CACLpC,KAAM,EACNsC,iBAAkB,GAClBjI,MAAOqH,KC1BI,SAASa,GAAe7E,GAErC,IASMrD,EAAQ,IAAIL,IAAM0D,EAAMC,WAAW8C,SAAS,UAC9CpB,EAAQ,GACZ,IAAK,IAAM3E,KAAKL,EACT,aAAcmI,KAAK9H,IAA0B,oBAAbL,EAAMK,IAAoB,WAC7D,IAboB+H,EAahB5E,EAAS,GACSxD,EAAMK,KACdgI,SAAQ,SAACtI,GAAD,OACpByD,EAAO/C,KAAK,CAACT,MAAOD,EAAEE,aAGxB+E,EAAMvE,KAAK,kBAAC,GAAD,CAAoBoD,QAAS,kBAAMR,EAAMC,WAAWC,SAAS,YAAa,CAACC,OAAQA,KAC5FyB,IAAK5E,EAAEiI,WAAY9E,OAAQA,EAAQwE,MApBjBI,EAoBsC/H,EAAEiI,WAnB1C,kBAATF,EACA,GAEJA,EACNG,QAAQ,kBAAmB,SAC3BA,QAAQ,2BAA4B,WACpCA,QAAQ,MAAM,SAACC,GAAD,OAASA,EAAIC,qBAKmC,GAWjE,OACE,kBAACpC,EAAA,EAAD,CAAYvC,MAAOC,GAAOuC,WACvBtB,GAOPkD,GAAe1B,kBAAoB,YACjC,MAAO,CACLC,MAFmD,EAAjBnD,WAEhB8C,SAAS,WAI/B,IAAMrC,GAASK,IAAWC,OAAO,CAC/BiC,UAAW,CACTX,KAAM,EACNe,YAAa,GACbC,aAAc,GACdrC,gBAAiB,U,UC7CN,SAASoE,GAAiBrF,GAEvC,OACE,kBAACgD,EAAA,EAAD,CAAYsC,sBAAuB5E,GAAOuC,WACxC,kBAACtE,GAAA,EAAD,CAAYsB,WAAYD,EAAMC,cAKpCoF,GAAiBlC,kBAAoB,CAClCC,MAAO,mBAGV,IAAM1C,GAASK,IAAWC,OAAO,CAC/BiC,UAAW,CACTX,KAAM,EACNiD,WAAY,GACZC,YAAa,GACblE,eAAe,Y,6BCjBNmE,GAAb,YACE,WAAYzF,GAAQ,IAAD,sBACjB,4BAAMA,KACDwD,MAAQ,CAAEuB,KAAM,IAFJ,EADrB,sDAKY,IAAD,OACP,OACE,kBAAC,IAAD,KACE,kBAAC1C,EAAA,EAAD,CAAM5B,MAAOC,GAAOgF,MAClB,kBAAC/C,EAAA,EAAD,CAAMlC,MAAOC,GAAOgE,OAApB,mBACA,kBAACiB,GAAA,EAAD,CACElF,MAAOC,GAAOkF,MACdC,YAAY,+BACZC,aAAc,SAAAf,GAAI,OAAI,EAAKrB,SAAS,CAAEqB,aAG1C,kBAACgB,GAAA,EAAD,CAAQvF,QAAS,kBAAMI,KAAMxB,MAAM,EAAKoE,MAAMuB,OAAO3B,MAAM,sBAhBnE,GAAwCvC,IAAMC,WAwBxCJ,GAASK,IAAWC,OAAO,CAC/B0E,KAAM,CACJpD,KAAM,EACNjB,cAAe,SACfC,eAAgB,SAChB0E,YAAa,kBACbC,aAAc,CAAExI,OAAQ,EAAGD,MAAO,GAClC0I,cAAe,EACfC,aAAc,EACdlF,gBAAiB,OACjBiD,UAAW,EACXzG,OAAQ,GACR2I,OAAQ,GACR7E,QAAS,IAEXmD,MAAO,CACLpC,KAAM,EACN3F,MAAOqH,GAET4B,MAAO,CACLtD,KAAM,EACN+D,kBAAmB,QACnBC,kBAAmB,KChDhB,IAAMC,GAAb,yIAEI,OACE,gBAAClE,EAAA,EAAD,CAAM5B,MAAO,CAACC,GAAOuC,UAAW,CAAChC,gBAAiBzE,KAAKwD,MAAMrD,SAC3D,gBAACgG,EAAA,EAAD,CAAMlC,MAAOC,GAAO8F,WAAYhK,KAAKwD,MAAMrD,YAJnD,GAAqCkE,aAU/BH,GAASK,IAAWC,OAAO,CAC/BiC,UAAW,CACTxF,OAAQ,GACR6E,KAAM,EACNhB,eAAgB,SAChBiD,WAAY,UAEdiC,UAAW,CACT9E,WAAY,MACZT,gBAAiB,0BACjBoC,YAAa,EACbC,aAAc,KCnBH,SAASmD,GAAgBzG,GAAQ,IAAD,OACvCG,EAASH,EAAMC,WAAW8C,SAAS,UAEzC,OADAjI,QAAQC,IAAI,UAAYa,KAAKC,UAAUsE,IAErC,kBAAC6C,EAAA,EAAD,CAAYvC,MAAOC,GAAOgG,UACvBvG,EAAO/D,KAAI,SAAAO,GAAK,OAAI,kBAAC,GAAD,CAAiBA,MAAOA,EAAMA,WACnD,kBAACuG,EAAA,EAAD,CACI1C,QAAS,kBAAM,EAAKR,MAAMC,WAAWC,SAAS,iBADlD,wBAONuG,GAAgBtD,kBAAoB,CAClCC,MAAO,UAGT,IAAM1C,GAASK,IAAWC,OAAO,CAC/B0F,SAAU,CACRN,OAAQ,K,UCfSO,G,yIAGjB,OACE,gBAAC,EAASnK,KAAKwD,MACb,gBAACqC,EAAA,EAAD,KACE,gBAACA,EAAA,EAAD,CAAM5B,MAAO,CAACQ,gBAAiBzE,KAAKwD,MAAMrD,MAAOc,OAAQ,OACzD,gBAAC4E,EAAA,EAAD,CAAM5B,MAAOC,GAAO+D,QAClB,gBAAC9B,EAAA,EAAD,CAAMlC,MAAOC,GAAOgE,OAAQlI,KAAKwD,MAAM2E,MACvC,gBAACtC,EAAA,EAAD,CAAM5B,MAAOC,GAAOkG,mBAClB,gBAAC,IAAD,CAAkBnG,MAAOC,GAAOmG,cAC9B,gBAAC,IAAD,CAAiBjE,KAAOkE,gB,GAXKjG,aAqBvCH,GAASK,IAAWC,OAAO,CAC/ByD,OAAQ,CACNpD,cAAe,MACfkD,WAAY,SACZwC,WAAY,EACZtJ,OAAQ,IAEVmJ,kBAAmB,CACjBvF,cAAe,MACfkD,WAAY,YAGdsC,aAAc,CACZvD,aAAc,IAEhBoB,MAAO,CACLpC,KAAM,EACNsC,iBAAkB,GAClBjI,MAAOqH,KC5CI,SAASgD,GAAchH,GACpC,IAAMG,EAASH,EAAMC,WAAW8C,SAAS,UAEzC,OADAjI,QAAQC,IAAI,UAAYa,KAAKC,UAAUsE,IAErC,kBAAC6C,EAAA,EAAD,CAAYvC,MAAOC,GAAOgG,UACvBvG,EAAO/D,KAAI,SAAAO,GAAK,OAAI,kBAAC,GAAD,CAAiBA,MAAOA,EAAMA,YAIzDqK,GAAc7D,kBAAoB,YAChC,MAAO,CACLC,MAFkD,EAAjBnD,WAEf8C,SAAS,UAI/B,IAAMrC,GAASK,IAAWC,OAAO,CAC/B0F,SAAU,CACRN,OAAQ,KCdCa,GAAb,yIACY,IAAD,OACP,OACE,kBAAC5E,EAAA,EAAD,CAAM5B,MAAOC,GAAOwG,iBAClB,kBAAChE,EAAA,EAAD,CACE1C,QAAS,kBAAM,EAAKR,MAAMC,WAAWC,SAAS,gBADhD,wBAJR,GAAiCW,IAAMC,WAcjCJ,GAASK,IAAWC,OAAO,CAC/BkG,gBAAiB,CACf5E,KAAM,EACNhB,eAAgB,Y,oBCdP6F,GAAb,YAEE,WAAYnH,GAAQ,6CACZA,IAHV,sDAMY,IAAD,OACP,OACE,gBAAC,EAAD,QAAUxD,KAAKwD,MAAf,CAAsBQ,QAAS,WAC3B1F,QAAQC,IAAI,6BAA+B,EAAKiF,MAAMC,YACtD,EAAKD,MAAMC,WAAWC,SAAS,UAAW,EAAKF,UAEjD,gBAACqC,EAAA,EAAD,KACE,gBAACgC,GAAmB7H,KAAKwD,OACzB,gBAACqC,EAAA,EAAD,CAAM5B,MAAOC,GAAO+D,QAClB,gBAAC9B,EAAA,EAAD,CAAMlC,MAAOC,GAAOgE,OAAQlI,KAAKwD,MAAM2E,MACvC,gBAACtC,EAAA,EAAD,CAAM5B,MAAOC,GAAOkG,mBAClB,gBAAC,IAAD,CAAkBnG,MAAOC,GAAOmG,cAC9B,gBAAC,IAAD,CAAiBjE,KAAOwE,QAE1B,gBAAC,IAAD,CAAkB3G,MAAOC,GAAOmG,cAC9B,gBAAC,IAAD,CAAiBjE,KAAOyE,QAE1B,gBAAC,IAAD,CAAkB5G,MAAOC,GAAOmG,cAC9B,gBAAC,IAAD,CAAiBjE,KAAOkE,gBAxBxC,GAAiCjG,aAkC3BH,GAASK,IAAWC,OAAO,CAC/ByD,OAAQ,CACNpD,cAAe,MACfkD,WAAY,SACZwC,WAAY,EACZtJ,OAAQ,IAEVmJ,kBAAmB,CACjBvF,cAAe,MACfkD,WAAY,YAGdsC,aAAc,CACZvD,aAAc,IAEhBoB,MAAO,CACLpC,KAAM,EACNsC,iBAAkB,GAClBjI,MAAOqH,KCzDI,SAASsD,GAAWtH,GAEjC,OACE,kBAACgD,EAAA,EAAD,CAAYsC,sBAAuB5E,GAAOuC,WACxC,kBAAC,GAAD,CAAa9C,OAAQ,CAAC,CAACxD,MAAO,WAAY,CAACA,MAAO,YAAagI,KAAM,cAAe1E,WAAYD,EAAMC,aACtG,kBAACoC,EAAA,EAAD,CACE5B,MAAO,CACL4F,kBAAmB,QACnBC,kBAAmB,KAGvB,kBAAC,GAAD,CAAarG,WAAYD,EAAMC,cAKrCqH,GAAWnE,kBAAoB,CAC5BC,MAAO,SAGV,IAAM1C,GAASK,IAAWC,OAAO,CAC/BiC,UAAW,CACTX,KAAM,EACNe,YAAa,EACbC,aAAc,EACdrC,gBAAiB,OACjBK,eAAe,YCbbiG,IAJSC,IAASC,OAAO,CAC7BC,IAAK,CAAEC,WAAY,UACnBC,QAAS,KAEOC,+BAChB,CACEC,aAAcC,EACdnN,YChBW,SAA2BoF,GACxC,OACE,kBAACgD,EAAA,EAAD,KACE,kBAAC,EAAD,CAAkB/C,WAAYD,EAAMC,eDctC+H,SAAUnD,GACVlG,WAAY0G,GACZI,mBElBW,SAAkCzF,GAE/C,OADAlF,QAAQC,IAAIiF,GAER,kBAACgD,EAAA,EAAD,KACA,kBAAC,GAAD,CAAoB/C,WAAYD,EAAMC,eFexCgI,UAAWxB,GACXyB,QAASlB,GACTmB,KAAMb,IAER,CACEc,iBAAkB,OAElBC,yBAA0B,CACxBC,YAAa,CACXrH,gBAAiB+C,GAEnBuE,gBAAiB,WAORhB,IAFMiB,6BAAmBjB,IAEzBA,IGtCTkB,GAAkBC,gCAAsB,CAG5CC,KAAMC,KAERH,GAAgBI,KAAO,GAERC,kCAAiBL,GAAiB,CAAEM,QAAS,S,qkBCH7C,SAASC,GAAIhJ,GAAQ,IAAD,EACeiJ,oBAAS,GADxB,WAC1BC,EAD0B,KACPC,EADO,OAETC,IAAWC,IAAI,UAAhC5L,EAF0B,EAE1BA,OAAQD,EAFkB,EAElBA,MAEf,OADA1C,QAAQC,IAAI,SAAU0C,EAAQ,QAASD,GAClC0L,GAAsBlJ,EAAMsJ,kBAU7B,kBAACjH,EAAA,EAAD,CAAM5B,MAAO,CAACC,GAAOuC,YACrB,kBAACZ,EAAA,EAAD,CAAM5B,MAAO,CAAC,CAACjD,MAAoB,OAAbgK,IAAS+B,GAAYC,KAAKC,IAAI,IAAKjM,GAAQA,KAC9C,QAAhBgK,IAAS+B,IAAgB,kBAACG,EAAA,EAAD,CAAWC,SAAS,YAC9C,kBAAC,GAAD,QAXF,kBAACC,EAAA,EAAD,CACEC,WAAYC,GACZC,QAASC,GACTC,SAAU,kBAqClB,SAA6Bd,GAC3BA,GAAmB,GAtCGe,CAAoBf,MAe5C,SAAeW,KAAf,SAAAjL,EAAAC,OAAA,kEAAAD,EAAA,MACQsL,QAAQC,IAAI,CAChBC,IAAMC,UAAU,CACdC,EAAQ,KACRA,EAAQ,OAEVC,IAAA,MAEKC,IAASC,KAFd,CAKE,aAAcH,EAAQ,WAX5B,qCAgBA,SAASP,GAAmBW,GAG1B7P,QAAQ8P,KAAKD,G,mCAOf,IAAMjK,GAASK,IAAWC,OAAO,CAC/BiC,UAAW,CACTX,KAAM,EACNhB,eAAgB,SAChBL,gBAAiB+C,EACjB3C,cAAe,U,+DC9Df,kBAAmBwJ,WACrBC,OAAOC,iBAAiB,QAAQ,WAC9BF,UAAUG,cACPC,SAAS,0BAA2B,CAAEC,MAAO,MAC7CnL,MAAK,SAASqB,OAGdf,OAAM,SAASsK,GACd7P,QAAQsG,KAAK,oCAAqCuJ,U,oBCV1DQ,EAAOC,QAAU,IAA0B,uC,oBCA3CD,EAAOC,QAAU,IAA0B,wC,oBCA3CD,EAAOC,QAAU,IAA0B,iC,oLCItBlI,E,yIAEjB,OACE,gBAAC,IAAD,CAAkBzC,MAAO,CAACC,EAAO2K,OAAQ7O,KAAKwD,MAAMS,OAAQD,QAAShE,KAAKwD,MAAMQ,SAC5E,gBAAC,IAAD,CAAMC,MAAO,CAAE6K,cAAe,cAA9B,KAA+C9O,KAAKwD,MAAM+D,SAA1D,U,GAJ+BlD,aAUnCH,EAASK,IAAWC,OAAO,CAC/BqK,OAAQ,CACNrF,YAAa,kBACbC,aAAc,CAAExI,OAAQ,EAAGD,MAAO,GAClC0I,cAAe,EACfC,aAAc,EACdlF,gBAAiB,OACjBiD,UAAW,EACXzG,OAAQ,GACR0G,UAAW,GACXC,aAAc,GACd9C,eAAgB,SAChBiD,WAAY,SACZlD,cAAe,c","file":"static/js/app.00029900.chunk.js","sourcesContent":["import kmeans from 'ml-kmeans';\nimport Jimp from 'jimp';\nimport Color from 'pigment/full';\nexport default class ColorPicker {\n  static getProminentColors(image) {\n    console.log(\"image: \" + image);\n    /*\n    Jimp.RESIZE_NEAREST_NEIGHBOR;\n    Jimp.RESIZE_BILINEAR;\n    Jimp.RESIZE_BICUBIC;\n    Jimp.RESIZE_HERMITE;\n    Jimp.RESIZE_BEZIER;\n    These does not work with first params.\n    */\n    image.resize(Jimp.AUTO, 100);\n    let data = ColorPicker._prepareDataForKmeans(image);\n    let time = Date.now()\n    let ans = kmeans(data, 24, { initialization: 'random', maxIterations: 20 });\n    console.log(JSON.stringify(ans) + \",\" + (Date.now() - time) + \" ms\");\n    ans.centroids = ans.centroids.sort((c1, c2) => c2.size - c1.size);\n    console.log(ans.centroids);\n    let kmeansColors  = ans.centroids.map(centroid => {return new Color(this._labToHex(centroid.centroid))});\n    return this._getFinalColors(kmeansColors).map(c => {return {color: c.tohex()}});\n  }\n  // original implementation in java: https://github.com/kamalkishor1991/croma/blob/master/src/main/java/org/numixproject/colorextractor/image/KMeansColorPicker.java\n  static _getFinalColors(kmeansColors) {\n    console.log(\"----------------------\", kmeansColors);\n    kmeansColors.sort((c1, c2) => this._toArray(c1.tohsv())[0] < this._toArray(c2.tohsv())[0]);\n    let filteredColors = [];\n    for (let i = 0;i < kmeansColors.length; i += 4) {\n      let colorList = [];\n      for (let j = 0; j < 4; j++) {\n        colorList.push(kmeansColors[i + j]);\n      }\n      colorList.sort((c1, c2) => this._toArray(c1.tohsv())[1] < this._toArray(c2.tohsv())[1]);\n      filteredColors.push(colorList[colorList.length - 1]);\n      filteredColors.push(colorList[colorList.length - 2]);\n    }\n    console.log(\"filtered colors:\" + filteredColors);\n    let finalColors = [];\n    for (let i = 0;i < filteredColors.length; i += 2) {\n      if (this._toArray(filteredColors[i].tohsv())[2] > this._toArray(filteredColors[i + 1].tohsv())[2]) {\n        finalColors.push(filteredColors[i]);\n      } else {\n        finalColors.push(filteredColors[i + 1]);\n      }\n    }\n    return finalColors;\n  }\n\n  static _labToHex(lab) {\n    let color = new Color(\"lab(\" + lab[0] + \", \" + lab[1] + \", \" + lab[2] +  \")\");\n    return color.tohex();\n  }\n\n  static _prepareDataForKmeans(image) {\n    let data = [];\n    \n    console.log(\"image============\", image.bitmap.width, image.bitmap.height);\n    for (let i = 0; i < image.bitmap.width; i++) {\n      for (let j = 0; j < image.bitmap.height; j++) {\n        let intColor = image.getPixelColor(i, j);\n        let hex = this._toHexColor(intColor);\n        console.log(\"hex:\", hex);\n        let color = new Color(hex);\n        let xyz = color.tolab();\n        // format: \"xyz(19.78527130484015, 8.600439447528947, 95.19796416837329)\" to double array of xyz\n        xyz = xyz.substr(4, xyz.length - 5).split(\", \").map(v => parseFloat(v))\n        data.push(xyz);\n      } \n    }\n    \n    return data;\n  }\n\n  static _toHexColor(intColor) {\n    let rgba = Jimp.intToRGBA(intColor); // TODO: Need to optimize this once everything else starts working.\n    let color = new Color(\"rgb(\" + rgba.r + \", \" + rgba.g + \", \" + rgba.b + \")\");\n    return color.tohex();\n  }\n\n  static _toArray(color) {\n    let index = color.indexOf(\"(\");\n    color = color.substr(index + 1, color.length - index);\n    return color.split(\", \").map(c => parseFloat(c));\n  }\n}","import React from \"react\";\nimport CromaButton from './CromaButton';\nimport * as ImagePicker from 'expo-image-picker';\nimport Constants from 'expo-constants';\nimport * as Permissions from 'expo-permissions';\nimport ColorPicker from '../libs/ColorPicker'\nimport Jimp from 'jimp';\nimport {\n  View,\n  Alert,\n  StyleSheet,\n} from \"react-native\";\n\nexport class AddPalette extends React.Component {\n  \n  render() {\n    return (\n      <View>\n        <CromaButton\n          onPress={() => {\n            this._pickImage();\n          }}\n        >\n           GET PALETTE FROM IMAGE\n        </CromaButton>\n        <CromaButton\n          onPress={() => this.props.navigation.navigate(\"ColorPicker\")}\n        >\n           GET PALETTE FROM COLOR\n        </CromaButton>\n        <CromaButton\n          onPress={() => this.props.navigation.navigate(\"AddPaletteManually\")}\n        >\n           ADD COLORS MANUALLY\n        </CromaButton>\n\n        <CromaButton\n          style={styles.buttonPro}\n          onPress={() => Alert.alert(\"UNLOCK PRO\")}\n        >\n           UNLOCK PRO\n        </CromaButton>\n      </View>\n    );\n  }\n\n  componentDidMount() {\n    this.getPermissionAsync();\n  }\n\n  getPermissionAsync = async () => {\n    if (Constants.platform.ios) {\n      const { status } = await Permissions.askAsync(Permissions.CAMERA_ROLL);\n      if (status !== 'granted') {\n        alert('Sorry, we need camera roll permissions to make this work!');\n      }\n    }\n  }\n\n  _pickImage = async () => {\n    let result = await ImagePicker.launchImageLibraryAsync({\n      mediaTypes: ImagePicker.MediaTypeOptions.All,\n      quality: 1, \n      base64: true,\n    });\n   // console.log(\"Result: \" + JSON.stringify(result));\n   if (result.base64 !== undefined) {\n    Jimp.read(new Buffer(result.base64, \"base64\"))\n    .then(image => {\n      this.props.navigation.navigate(\"ColorList\", {colors: ColorPicker.getProminentColors(image)}); \n    })\n    .catch(err => {\n      console.log(\"Error: \" + JSON.stringify(err)); // TODO: add toast here \n    // Handle an exception.\n    });\n   } else {\n    Jimp.read(result.uri)\n      .then(image => {\n        this.props.navigation.navigate(\"ColorList\", {colors: ColorPicker.getProminentColors(image)}); \n      })\n      .catch(err => {\n        console.log(\"Error: \" + JSON.stringify(err)); // TODO: add toast here \n      // Handle an exception.\n      });\n    }\n  };\n}\n\nconst styles = StyleSheet.create({\n  buttonPro: {\n    backgroundColor: \"#f1544d\",\n  }\n});\n","const tintColor = '#2f95dc';\n\nexport default {\n  tintColor,\n  tabIconDefault: '#ccc',\n  tabIconSelected: tintColor,\n  tabBar: '#fefefe',\n  errorBackground: 'red',\n  errorText: '#fff',\n  warningBackground: '#EAEB5E',\n  warningText: '#666804',\n  noticeBackground: tintColor,\n  noticeText: '#fff',\n  primary: '#f1544d',\n  primaryDark: '#c94740',\n  text: '#fff',\n  accent: '#f0d04c',\n  grey: '#888',\n  darkGrey: '#333',\n  lightGrey: '#eee',\n  white: '#fff',\n  black: '#000',\n  fadedBlack: 'rgba(0, 0, 0, .5)',\n  backgroundColor: \"#f2f2f2\",\n};\n","import React from 'react';\nimport {StyleSheet, Text, View, TouchableOpacity,Clipboard } from 'react-native';\nimport { FontAwesomeIcon } from '@fortawesome/react-native-fontawesome'\nimport { faCopy } from '@fortawesome/free-regular-svg-icons'\n\nimport Color from 'pigment/full';\n\nexport function ColorDetail(props) {\n  const styles = StyleSheet.create({\n    backgroundColor: {\n      backgroundColor: props.color, height: 200, alignSelf: 'stretch'\n    },\n    info: {\n      flexDirection: 'row',\n      justifyContent: 'space-between',\n      padding: 4,\n    },\n    colorNameText: {\n      fontSize: 16,\n      fontWeight: '500',\n    },\n  });\n  const color = new Color(props.color);\n  let items = \n    [\n      { key: 'HEX', value: color.tohex() },\n      { key: 'RGB', value: color.torgb() },\n      { key: 'HSL', value: color.tohsl() },\n      { key: 'HSV', value: color.tohsv() },\n      { key: 'HWB', value: color.tohwb() },\n      { key: 'CMYK', value: color.tocmyk() },\n      { key: 'CIELAB', value: color.tolab() },\n      { key: 'Luminance', value: (color.luminance() * 100).toFixed(2) + '%' },\n      { key: 'Darkness', value: (color.darkness() * 100).toFixed(2) + '%' },\n    ];\n  let writeToClipboard = function(value) {\n    Clipboard.setString(value);\n  }\n  return (\n    <View style={{flex: 1, flexDirection: 'column', padding: 8}}>\n      <View style={[styles.backgroundColor]} ></View>\n      {/* <Text {...props} style={[props.style, { fontFamily: 'space-mono' }]} >{props.color}</Text> */}\n      <View >\n        {items.map(item => (\n          <TouchableOpacity\n           key={item.key}\n           onPress={() => writeToClipboard(item.value)}\n          >  \n            <View style={styles.info}>\n              <Text style={styles.colorNameText}>{item.key} : </Text>\n              \n              <Text >{item.value}</Text>\n              <FontAwesomeIcon icon={ faCopy } />\n            </View>\n          </TouchableOpacity>\n        ))}\n        \n      </View>\n    </View>\n  );\n}\n","import React from 'react';\nimport { ScrollView, StyleSheet, Button} from 'react-native';\nimport { ColorDetail } from '../components/ColorDetails';\nimport CromaButton from '../components/CromaButton';\n\nexport default function ColorDetailScreen(props) {\n  const color = props.navigation.getParam(\"color\");\n  return (\n    <ScrollView style={styles.container}>\n      <ColorDetail navigation={props.navigation} color={color}>{color}</ColorDetail>\n      <CromaButton  \n        onPress={() => props.navigation.navigate(\"Palettes\", {\"color\": color})}\n      >See color palettes</CromaButton>\n    </ScrollView>\n  );\n}\n\nColorDetailScreen.navigationOptions = ({ navigation }) => {\n  return {\n    title: navigation.getParam('color'),\n  };\n};\n\nconst styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    paddingLeft: 12,\n    paddingRight: 12,\n  },\n});\n","import React from 'react';\nimport {Text, View} from 'react-native';\nimport { ColorPicker, fromHsv} from 'react-native-color-picker';\nimport CromaButton from './CromaButton';\n\nexport class CromaColorPicker extends React.Component {\n  constructor(props) { \n        super(props); \n        this.state = { color : '#4cb96b' };\n  } \n  render() {\n    return (\n    <View>\n      <ColorPicker \n      onColorChange={color => this.setState({color: fromHsv(color)})}\n      style={{height: 400}}/>\n      <Text>{this.state.color}</Text>\n      <CromaButton  \n        onPress={() =>  this.props.navigation.navigate(\"ColorDetails\", {\"color\": this.state.color})}\n      >SEE COLOR DETAILS</CromaButton>  \n    </View>\n    );\n\n  }\n}","import * as React from 'react';\nimport { StyleSheet, Animated} from 'react-native';\nimport Colors from '../constants/Colors';\nimport { TouchableOpacity } from 'react-native-gesture-handler';\n\nexport default class Card extends React.Component {\n  render() {\n    return (\n      <TouchableOpacity onPress={this.props.onPress} style={[styles.inner, this.props.style]}>\n        <Animated.View {...this.props}  >\n          {this.props.children}\n        </Animated.View>\n      </TouchableOpacity>\n    );\n  }\n}\n\nconst styles = StyleSheet.create({\n  inner: {\n    backgroundColor: Colors.white,\n    marginVertical: 4,\n    elevation: 1,\n    marginTop: 8,\n    marginBottom: 8,\n  },\n});","import * as React from 'react';\nimport { StyleSheet, View, Text } from 'react-native';\nexport default function MultiColorView(props) {\n  const styles = StyleSheet.create({\n    palette: {\n      alignItems: 'stretch',\n      flexDirection: 'row',\n      height: 100,\n    },\n    color: {\n      flex: 1,\n    },\n  });\n  return <View style={styles.palette}>\n    {props.colors.map(item => (\n      <View\n        style={[styles.color, { backgroundColor: item.color }]}\n        key={item.color}\n      />\n    ))}\n  </View>\n}\n","import * as React from 'react';\nimport { StyleSheet, View, Text } from 'react-native';\nimport Card from './Card';\nimport Colors from '../constants/Colors';\nimport MultiColorView from './MultiColorView';\n\nexport class PalettePreviewCard extends React.Component {\n  \n  render() {\n    return (\n      <Card {...this.props}>\n        <View>\n          <MultiColorView {...this.props}></MultiColorView>\n          <View style={styles.bottom}>\n            <Text style={styles.label}>{this.props.name}</Text>\n          </View>\n        </View>\n      </Card>\n    );\n  }\n}\n\nconst styles = StyleSheet.create({\n  bottom: {\n    flexDirection: 'row',\n    alignItems: 'center',\n  },\n  label: {\n    flex: 1,\n    marginHorizontal: 16,\n    color: Colors.darkGrey,\n  },\n});","import React from 'react';\nimport { ScrollView, StyleSheet, Text} from 'react-native';\nimport Color from 'pigment/full';\nimport {PalettePreviewCard} from '../components/PalettePreviewCard';\nexport default function PalettesScreen(props) {\n  // Convert camelCase to sentence\n  const parseCamelCase = (text) => {\n    if (typeof text !== 'string') {\n        return '';\n    }\n    return text\n    .replace(/([a-z])([A-Z])/g, '$1 $2')\n    .replace(/\\b([A-Z]+)([A-Z])([a-z])/, '$1 $2$3')\n    .replace(/^./, (str) => str.toUpperCase());\n  }\n  const color = new Color(props.navigation.getParam(\"color\"));\n  let items = [];\n  for (const i in color) {\n    if ((/.*scheme$/i).test(i) && typeof color[i] === 'function') {\n      let colors = [];\n      const paletteColors = color[i]();\n      paletteColors.forEach((c)=> \n        colors.push({color: c.tohex()})\n      );\n     // console.log(\"colors================\" + JSON.stringify(colors));\n      items.push(<PalettePreviewCard onPress={() => props.navigation.navigate(\"ColorList\", {colors: colors})} \n        key={i.toString()} colors={colors} name={parseCamelCase(i.toString())}></PalettePreviewCard>)\n    }\n  }\n  return (\n    <ScrollView style={styles.container}>\n      {items}\n    </ScrollView>\n  );\n}\n\n \n\nPalettesScreen.navigationOptions = ({ navigation }) => {\n  return {\n    title: navigation.getParam('color'),\n  };\n};\n\nconst styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    paddingLeft: 12,\n    paddingRight: 12,\n    backgroundColor: '#fff',\n  },\n});\n","import React from 'react';\nimport { ScrollView, StyleSheet, Button, Alert, View} from 'react-native';\nimport { AddPalette } from '../components/AddPalette';\n\nexport default function AddPaletteScreen(props) {\n\n  return (\n    <ScrollView contentContainerStyle={styles.container}>\n      <AddPalette navigation={props.navigation}></AddPalette>\n    </ScrollView>\n  );\n}\n\nAddPaletteScreen.navigationOptions = {\n   title: 'Add new palette',\n};\n\nconst styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    marginLeft: 12,\n    marginRight: 12,\n    justifyContent:'center',\n  },\n});\n","import React from \"react\";\nimport { Text, View, StyleSheet, TextInput, Button, Alert } from \"react-native\";\nimport { ScrollView } from \"react-native-gesture-handler\";\nimport Colors from \"../constants/Colors\";\n\nexport class AddPaletteManually extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = { text: \"\" };\n  }\n  render() {\n    return (\n      <ScrollView>\n        <View style={styles.card}>\n          <Text style={styles.label}>ADD NEW PALETTE</Text>\n          <TextInput\n            style={styles.input}\n            placeholder=\"Enter a name for the palette\"\n            onChangeText={text => this.setState({ text })}\n          />\n        </View>\n        <Button onPress={() => Alert.alert(this.state.text)} title=\"Save Palette\">\n\n        </Button>\n      </ScrollView>\n    );\n  }\n}\n\nconst styles = StyleSheet.create({\n  card: {\n    flex: 1,\n    flexDirection: \"column\",\n    justifyContent: \"center\",\n    shadowColor: \"rgba(0,0,0, .4)\",\n    shadowOffset: { height: 1, width: 1 },\n    shadowOpacity: 1,\n    shadowRadius: 1,\n    backgroundColor: \"#fff\",\n    elevation: 2,\n    height: 80,\n    margin: 10,\n    padding: 10\n  },\n  label: {\n    flex: 1,\n    color: Colors.darkGrey\n  },\n  input: {\n    flex: 1,\n    borderBottomColor: \"black\",\n    borderBottomWidth: 1,\n  }\n});\n\n","import * as React from 'react';\nimport { View, StyleSheet, Text } from 'react-native';\n\nexport class SingleColorView extends React.Component {\n  render() {\n    return (\n      <View style={[styles.container, {backgroundColor: this.props.color}]}>\n        <Text style={styles.colorText}>{this.props.color}</Text>\n      </View>\n    );\n  }\n}\n\nconst styles = StyleSheet.create({\n  container: {\n    height: 40,\n    flex: 1,\n    justifyContent: \"center\",\n    alignItems: \"center\",\n  },\n  colorText: {\n    fontWeight: \"700\",\n    backgroundColor: \"rgba(255, 255, 255, .3)\",\n    paddingLeft: 5,\n    paddingRight: 5,\n  }\n});","import React from 'react';\nimport {SingleColorView} from '../components/SingleColorView';\nimport {ScrollView, TouchableOpacity, StyleSheet, Text} from 'react-native'\nimport CromaButton from '../components/CromaButton';\n\nexport default function ColorListScreen(props) {\n  const colors = props.navigation.getParam(\"colors\");\n  console.log(\"Colors:\" + JSON.stringify(colors));\n  return (\n    <ScrollView style={styles.listview} >\n      {colors.map(color => <SingleColorView color={color.color}></SingleColorView>)}\n      <CromaButton\n          onPress={() => this.props.navigation.navigate('ColorPicker')}>\n          SAVE AS NEW PALETTE\n      </CromaButton>\n    </ScrollView>\n  );\n}\nColorListScreen.navigationOptions = {\n  title: 'Colors',\n};\n\nconst styles = StyleSheet.create({\n  listview: {\n    margin: 8,\n  }\n});","import * as React from 'react';\nimport { StyleSheet, View, Text } from 'react-native';\nimport Card from './Card';\nimport Colors from '../constants/Colors';\nimport { FontAwesomeIcon } from '@fortawesome/react-native-fontawesome'\nimport { faTrashAlt } from '@fortawesome/free-solid-svg-icons'\nimport { TouchableOpacity } from 'react-native-gesture-handler';\n\n\nexport default class SingleColorCard extends React.Component {\n  \n  render() {\n    return (\n      <Card {...this.props}>\n        <View>\n          <View style={{backgroundColor: this.props.color, height: 100}}></View>\n          <View style={styles.bottom}>\n            <Text style={styles.label}>{this.props.name}</Text>\n            <View style={styles.actionButtonsView}>\n              <TouchableOpacity style={styles.actionButton}>\n                <FontAwesomeIcon icon={ faTrashAlt } />\n              </TouchableOpacity>\n            </View>\n          </View>\n        </View>\n      </Card>\n    );\n  }\n}\n\nconst styles = StyleSheet.create({\n  bottom: {\n    flexDirection: 'row',\n    alignItems: 'center',\n    paddingTop: 8,\n    height: 36,\n  },\n  actionButtonsView: {\n    flexDirection: \"row\",\n    alignItems: \"flex-end\",\n    \n  },\n  actionButton: {\n    paddingRight: 16,\n  },\n  label: {\n    flex: 1,\n    marginHorizontal: 16,\n    color: Colors.darkGrey,\n  },\n});","import React from 'react';\nimport SingleColorCard from '../components/SingleColorCard';\nimport {ScrollView,  StyleSheet} from 'react-native'\n\nexport default function PaletteScreen(props) {\n  const colors = props.navigation.getParam(\"colors\");\n  console.log(\"Colors:\" + JSON.stringify(colors));\n  return (\n    <ScrollView style={styles.listview} >\n      {colors.map(color => <SingleColorCard color={color.color}></SingleColorCard>)}\n    </ScrollView>\n  );\n}\nPaletteScreen.navigationOptions = ({ navigation }) => {\n  return {\n    title: navigation.getParam('name'),\n  };\n};\n\nconst styles = StyleSheet.create({\n  listview: {\n    margin: 8,\n  }\n});","import React from \"react\";\nimport {\n  View,\n  StyleSheet,\n} from \"react-native\";\nimport CromaButton from \"./CromaButton\";\n\nexport class PaletteList extends React.Component {\n  render() {\n    return (\n      <View style={styles.inputsContainer}>\n        <CromaButton\n          onPress={() => this.props.navigation.navigate(\"AddPalette\")}\n        >\n          Add new palette\n        </CromaButton>\n      </View>\n    );\n  }\n}\n\nconst styles = StyleSheet.create({\n  inputsContainer: {\n    flex: 1,\n    justifyContent: \"center\"\n  }\n});\n","import * as React from 'react';\nimport { StyleSheet, View, Text } from 'react-native';\nimport Card from './Card';\nimport Colors from '../constants/Colors';\nimport MultiColorView from './MultiColorView';\nimport { FontAwesomeIcon } from '@fortawesome/react-native-fontawesome'\nimport { faTrashAlt, faShareSquare, faEdit } from '@fortawesome/free-solid-svg-icons'\nimport { TouchableOpacity } from 'react-native-gesture-handler';\n\n\nexport class PaletteCard extends React.Component {\n  \n  constructor(props) {\n    super(props);\n  }\n\n  render() {\n    return (\n      <Card {...this.props} onPress={() => {\n          console.log(\"navigate to palette screen\" + this.props.navigation);\n          this.props.navigation.navigate('Palette', this.props);\n        }}>\n        <View>\n          <MultiColorView {...this.props}></MultiColorView>\n          <View style={styles.bottom}>\n            <Text style={styles.label}>{this.props.name}</Text>\n            <View style={styles.actionButtonsView}>\n              <TouchableOpacity style={styles.actionButton}>\n                <FontAwesomeIcon icon={ faEdit } />\n              </TouchableOpacity>\n              <TouchableOpacity style={styles.actionButton}>\n                <FontAwesomeIcon icon={ faShareSquare } />\n              </TouchableOpacity >\n              <TouchableOpacity style={styles.actionButton}>\n                <FontAwesomeIcon icon={ faTrashAlt } />\n              </TouchableOpacity>\n            </View>\n          </View>\n        </View>\n      </Card>\n    );\n  }\n}\n\nconst styles = StyleSheet.create({\n  bottom: {\n    flexDirection: 'row',\n    alignItems: 'center',\n    paddingTop: 8,\n    height: 36,\n  },\n  actionButtonsView: {\n    flexDirection: \"row\",\n    alignItems: \"flex-end\",\n    \n  },\n  actionButton: {\n    paddingRight: 16,\n  },\n  label: {\n    flex: 1,\n    marginHorizontal: 16,\n    color: Colors.darkGrey,\n  },\n});","import React from 'react';\nimport { ScrollView, View, StyleSheet} from 'react-native';\nimport { PaletteList } from '../components/PaletteList';\nimport {PaletteCard} from '../components/PaletteCard';\n\nexport default function HomeScreen(props) {\n\n  return (\n    <ScrollView contentContainerStyle={styles.container}>\n      <PaletteCard colors={[{color: \"#11a1aa\"}, {color: \"#cdcdcc\"}]} name={\"paletteName\"} navigation={props.navigation}></PaletteCard>\n      <View\n        style={{\n          borderBottomColor: 'black',\n          borderBottomWidth: 1,\n        }}\n      />\n      <PaletteList navigation={props.navigation}></PaletteList>\n    </ScrollView>\n  );\n}\n\nHomeScreen.navigationOptions = {\n   title: 'Croma',\n};\n\nconst styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    paddingLeft: 0,\n    paddingRight: 0,\n    backgroundColor: '#fff',\n    justifyContent:'center',\n  },\n});\n","import React from 'react';\nimport { Platform } from 'react-native';\nimport { createStackNavigator } from 'react-navigation';\nimport { createAppContainer } from 'react-navigation';\nimport ColorDetailsScreen from '../screens/ColorDetailScreen'\nimport ColorPickerScreen from '../screens/ColorPickerScreen'\nimport PalettesScreen from '../screens/PalettesScreen';\nimport AddPaletteScreen from '../screens/AddPaletteScreen';\nimport AddPaletteManuallyScreen from '../screens/AddPaletteManuallyScreen';\nimport ColorListScreen from '../screens/ColorListScreen';\nimport PaletteScreen from '../screens/PaletteScreen';\nimport HomeScreen from '../screens/HomeScreen'\nimport Colors from '../constants/Colors'\n\nconst config = Platform.select({\n  web: { headerMode: 'screen' },\n  default: {},\n});\nconst RootStack = createStackNavigator(\n  {\n    ColorDetails: ColorDetailsScreen,\n    ColorPicker: ColorPickerScreen,\n    Palettes: PalettesScreen,\n    AddPalette: AddPaletteScreen,\n    AddPaletteManually: AddPaletteManuallyScreen,\n    ColorList: ColorListScreen,\n    Palette: PaletteScreen,\n    Home: HomeScreen,\n  },\n  {\n    initialRouteName: 'Home',\n    /* The header config from HomeScreen is now here */\n    defaultNavigationOptions: {\n      headerStyle: {\n        backgroundColor: Colors.primary,\n      },\n      headerTintColor: '#fff',\n    },\n  }\n);\n\nconst AppContainer = createAppContainer(RootStack);\n\nexport default RootStack;\n","import React from 'react';\nimport { CromaColorPicker } from '../components/CromaColorPicker';\nimport {ScrollView} from 'react-native'\n\n\nexport default function ColorPickerScreen(props) {\n  return (\n    <ScrollView >\n      <CromaColorPicker navigation={props.navigation}></CromaColorPicker> \n    </ScrollView>\n  );\n}\n","import React from \"react\";\nimport {\n  ScrollView\n} from \"react-native\";\nimport { AddPaletteManually } from \"../components/AddPaletteManually\";\n\nexport default function AddPaletteManuallyScreen(props) {\n  console.log(props)\n  return (\n      <ScrollView>\n      <AddPaletteManually navigation={props.navigation}></AddPaletteManually>\n    </ScrollView>\n  );\n}\n","import { createBrowserApp } from '@react-navigation/web';\nimport { createSwitchNavigator } from 'react-navigation';\n\nimport MainTabNavigator from './MainTabNavigator';\n\nconst switchNavigator = createSwitchNavigator({\n  // You could add another route here for authentication.\n  // Read more at https://reactnavigation.org/docs/en/auth-flow.html\n  Main: MainTabNavigator,\n});\nswitchNavigator.path = '';\n\nexport default createBrowserApp(switchNavigator, { history: 'hash' });\n","import { AppLoading } from 'expo';\nimport { Asset } from 'expo-asset';\nimport * as Font from 'expo-font';\nimport React, { useState } from 'react';\nimport { Platform, StatusBar, StyleSheet, View, Dimensions } from 'react-native';\nimport { Ionicons } from '@expo/vector-icons';\nimport Colors from './constants/Colors'\nimport AppNavigator from './navigation/AppNavigator';\n\nexport default function App(props) {\n  const [isLoadingComplete, setLoadingComplete] = useState(false);\n  const {height, width} = Dimensions.get('window');\n  console.log(\"height\", height, \"width\", width);\n  if (!isLoadingComplete && !props.skipLoadingScreen) {\n    return (\n      <AppLoading\n        startAsync={loadResourcesAsync}\n        onError={handleLoadingError}\n        onFinish={() => handleFinishLoading(setLoadingComplete)}\n      />\n    );\n  } else {\n    return (\n      <View style={[styles.container]}>\n      <View style={[{width: Platform.OS=='web' ? Math.min(600, width): width}]}>\n        {Platform.OS === 'ios' && <StatusBar barStyle=\"default\" />}\n        <AppNavigator />\n      </View>\n      </View>\n    );\n  }\n} \n\nasync function loadResourcesAsync() {\n  await Promise.all([\n    Asset.loadAsync([\n      require('./assets/images/robot-dev.png'),\n      require('./assets/images/robot-prod.png'),\n    ]),\n    Font.loadAsync({\n      // This is the font that we are using for our tab bar\n      ...Ionicons.font,\n      // We include SpaceMono because we use it in HomeScreen.js. Feel free to\n      // remove this if you are not using it in your app\n      'space-mono': require('./assets/fonts/SpaceMono-Regular.ttf'),\n    }),\n  ]);\n}\n\nfunction handleLoadingError(error) {\n  // In this case, you might want to report the error to your error reporting\n  // service, for example Sentry\n  console.warn(error);\n}\n\nfunction handleFinishLoading(setLoadingComplete) {\n  setLoadingComplete(true);\n}\n\nconst styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    justifyContent: \"center\",\n    backgroundColor: Colors.backgroundColor,\n    flexDirection: \"row\",\n  },\n});\n","/* eslint-env browser */\n\nif ('serviceWorker' in navigator) {\n  window.addEventListener('load', function() {\n    navigator.serviceWorker\n      .register('/expo-service-worker.js', { scope: '/' })\n      .then(function(info) {\n        // console.info('Registered service-worker', info);\n      })\n      .catch(function(error) {\n        console.info('Failed to register service-worker', error);\n      });\n  });\n}\n","module.exports = __webpack_public_path__ + \"static/media/robot-dev.54da1e98.png\";","module.exports = __webpack_public_path__ + \"static/media/robot-prod.c7578911.png\";","module.exports = __webpack_public_path__ + \"./fonts/SpaceMono-Regular.ttf\";","import * as React from 'react';\nimport { StyleSheet, Text} from 'react-native';\nimport { TouchableOpacity } from 'react-native-gesture-handler';\n\nexport default class CromaButton extends React.Component {\n  render() {\n    return (\n      <TouchableOpacity style={[styles.button, this.props.style]} onPress={this.props.onPress} >\n          <Text style={{ textTransform: 'uppercase'}}>  {this.props.children} </Text>\n      </TouchableOpacity>\n    );\n  }\n}\n\nconst styles = StyleSheet.create({\n  button: {\n    shadowColor: 'rgba(0,0,0, .4)',\n    shadowOffset: { height: 1, width: 1 },\n    shadowOpacity: 1,\n    shadowRadius: 1,\n    backgroundColor: '#fff',\n    elevation: 2,\n    height: 50,\n    marginTop: 10,\n    marginBottom: 10,\n    justifyContent: 'center',\n    alignItems: 'center',\n    flexDirection: 'column',\n  },\n});"],"sourceRoot":""}